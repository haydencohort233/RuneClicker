{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\achievements\\\\achievements.js\",\n  _s = $RefreshSig$();\n// /src/components/achievements/achievements.js\nimport React, { useEffect, useState } from 'react';\nimport styles from './achievements.module.css';\nimport achievementData from './achievements-list.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Achievements({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [achievements, setAchievements] = useState({});\n  useEffect(() => {\n    // Load achievements from JSON\n    const achievementList = [{\n      id: 'gain_100_currency',\n      name: 'Gain 100 Currency',\n      description: 'Earn 100 currency.',\n      condition: gs => gs.currency >= 100\n    }];\n\n    // Initialize achievements in gameState if not already present\n    if (!gameState.achievements) {\n      setGameState(prevState => ({\n        ...prevState,\n        achievements: achievementList.reduce((acc, achievement) => {\n          acc[achievement.id] = false;\n          return acc;\n        }, {})\n      }));\n      return; // Exit early if achievements were not initialized yet\n    }\n\n    // Check for completed achievements\n    const unlockedAchievements = achievementList.filter(achievement => achievement.condition(gameState));\n\n    // Update local achievements state\n    const updatedAchievements = {\n      ...gameState.achievements\n    };\n    unlockedAchievements.forEach(achievement => {\n      if (!updatedAchievements[achievement.id]) {\n        console.log(`Achievement unlocked: ${achievement.name}`); // Log when an achievement is unlocked\n        updatedAchievements[achievement.id] = true;\n      }\n    });\n    setAchievements(updatedAchievements);\n\n    // Update gameState with only newly unlocked achievements\n    if (unlockedAchievements.some(achievement => !gameState.achievements[achievement.id])) {\n      setGameState(prevState => ({\n        ...prevState,\n        achievements: updatedAchievements\n      }));\n    }\n  }, [gameState, setGameState]);\n\n  // Dev Button to clear all achievements\n  const clearAllAchievements = () => {\n    console.log('Clearing all achievements for testing purposes');\n    const clearedAchievements = Object.keys(gameState.achievements).reduce((acc, key) => {\n      acc[key] = false;\n      return acc;\n    }, {});\n    setAchievements(clearedAchievements);\n    setGameState(prevState => ({\n      ...prevState,\n      achievements: clearedAchievements\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.achievementsContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Achievements\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.achievementList,\n      children: Object.keys(achievements).map(key => {\n        var _achievementList$find, _achievementList$find2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: achievements[key] ? `${styles.achievementItem} ${styles.achieved}` : styles.achievementItem,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: (_achievementList$find = achievementList.find(ach => ach.id === key)) === null || _achievementList$find === void 0 ? void 0 : _achievementList$find.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: (_achievementList$find2 = achievementList.find(ach => ach.id === key)) === null || _achievementList$find2 === void 0 ? void 0 : _achievementList$find2.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearAllAchievements,\n      className: `${styles.achievementButton} ${styles.devButton}`,\n      children: \"Clear All Achievements (Dev Button)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(Achievements, \"e6meEyPLCds6E+4W7ZuaZld2ou0=\");\n_c = Achievements;\nexport default Achievements;\nvar _c;\n$RefreshReg$(_c, \"Achievements\");","map":{"version":3,"names":["React","useEffect","useState","styles","achievementData","jsxDEV","_jsxDEV","Achievements","gameState","setGameState","_s","achievements","setAchievements","achievementList","id","name","description","condition","gs","currency","prevState","reduce","acc","achievement","unlockedAchievements","filter","updatedAchievements","forEach","console","log","some","clearAllAchievements","clearedAchievements","Object","keys","key","className","achievementsContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_achievementList$find","_achievementList$find2","achievementItem","achieved","find","ach","onClick","achievementButton","devButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/achievements/achievements.js"],"sourcesContent":["// /src/components/achievements/achievements.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport styles from './achievements.module.css';\r\nimport achievementData from './achievements-list.json';\r\n\r\nfunction Achievements({ gameState, setGameState }) {\r\n  const [achievements, setAchievements] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Load achievements from JSON\r\n    const achievementList = [\r\n      {\r\n        id: 'gain_100_currency',\r\n        name: 'Gain 100 Currency',\r\n        description: 'Earn 100 currency.',\r\n        condition: (gs) => gs.currency >= 100,\r\n      },\r\n    ];\r\n\r\n    // Initialize achievements in gameState if not already present\r\n    if (!gameState.achievements) {\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        achievements: achievementList.reduce((acc, achievement) => {\r\n          acc[achievement.id] = false;\r\n          return acc;\r\n        }, {}),\r\n      }));\r\n      return; // Exit early if achievements were not initialized yet\r\n    }\r\n\r\n    // Check for completed achievements\r\n    const unlockedAchievements = achievementList.filter((achievement) => achievement.condition(gameState));\r\n\r\n    // Update local achievements state\r\n    const updatedAchievements = { ...gameState.achievements };\r\n    unlockedAchievements.forEach((achievement) => {\r\n      if (!updatedAchievements[achievement.id]) {\r\n        console.log(`Achievement unlocked: ${achievement.name}`); // Log when an achievement is unlocked\r\n        updatedAchievements[achievement.id] = true;\r\n      }\r\n    });\r\n\r\n    setAchievements(updatedAchievements);\r\n\r\n    // Update gameState with only newly unlocked achievements\r\n    if (unlockedAchievements.some((achievement) => !gameState.achievements[achievement.id])) {\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        achievements: updatedAchievements,\r\n      }));\r\n    }\r\n  }, [gameState, setGameState]);\r\n\r\n  // Dev Button to clear all achievements\r\n  const clearAllAchievements = () => {\r\n    console.log('Clearing all achievements for testing purposes');\r\n    const clearedAchievements = Object.keys(gameState.achievements).reduce((acc, key) => {\r\n      acc[key] = false;\r\n      return acc;\r\n    }, {});\r\n    setAchievements(clearedAchievements);\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      achievements: clearedAchievements,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.achievementsContainer}>\r\n      <h2>Achievements</h2>\r\n      <div className={styles.achievementList}>\r\n        {Object.keys(achievements).map((key) => (\r\n          <div\r\n            key={key}\r\n            className={\r\n              achievements[key]\r\n                ? `${styles.achievementItem} ${styles.achieved}`\r\n                : styles.achievementItem\r\n            }\r\n          >\r\n            <h3>{achievementList.find((ach) => ach.id === key)?.name}</h3>\r\n            <p>{achievementList.find((ach) => ach.id === key)?.description}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={clearAllAchievements} className={`${styles.achievementButton} ${styles.devButton}`}>Clear All Achievements (Dev Button)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Achievements;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}