{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\buildings\\\\buildings.js\",\n  _s = $RefreshSig$();\n// /src/components/buildings/buildings.js\nimport React, { useState, useEffect } from 'react';\nimport buildingStats from './building-stats.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Buildings({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [buildings, setBuildings] = useState({});\n  useEffect(() => {\n    // Load existing buildings from gameState if available\n    if (gameState && gameState.buildings) {\n      setBuildings(gameState.buildings);\n    }\n  }, [gameState]);\n  useEffect(() => {\n    // Generate income based on building stats\n    const incomeIntervals = Object.entries(buildings).map(([buildingName, {\n      count\n    }]) => {\n      if (count > 0 && buildingStats[buildingName]) {\n        const interval = setInterval(() => {\n          setGameState(prevState => ({\n            ...prevState,\n            currency: prevState.currency + count * buildingStats[buildingName].income\n          }));\n        }, buildingStats[buildingName].incomeInterval);\n        return interval;\n      }\n      return null;\n    });\n\n    // Clear intervals when component unmounts or buildings change\n    return () => {\n      incomeIntervals.forEach(interval => {\n        if (interval) clearInterval(interval);\n      });\n    };\n  }, [buildings, setGameState]);\n\n  // Add a new building or increase count if it exists\n  const addBuilding = buildingName => {\n    var _buildings$buildingNa, _buildings$buildingNa2, _buildingStats$buildi;\n    const currentCount = ((_buildings$buildingNa = buildings[buildingName]) === null || _buildings$buildingNa === void 0 ? void 0 : _buildings$buildingNa.count) || 0;\n    const currentCost = ((_buildings$buildingNa2 = buildings[buildingName]) === null || _buildings$buildingNa2 === void 0 ? void 0 : _buildings$buildingNa2.cost) || buildingStats[buildingName].cost;\n    const costIncreaseModifier = ((_buildingStats$buildi = buildingStats[buildingName]) === null || _buildingStats$buildi === void 0 ? void 0 : _buildingStats$buildi.costIncreaseModifier) || 1.15;\n    const newCost = Math.round(currentCost * costIncreaseModifier); // Increase cost based on modifier from building-stats.json\n\n    // Check if user has enough currency to buy the building\n    if (gameState.currency < currentCost) {\n      alert('Not enough currency to buy this building!');\n      return;\n    }\n    const newBuildings = {\n      ...buildings,\n      [buildingName]: {\n        count: currentCount + 1,\n        cost: newCost\n      }\n    };\n    setBuildings(newBuildings);\n\n    // Update gameState with new buildings object and deduct cost\n    setGameState(prevState => ({\n      ...prevState,\n      currency: prevState.currency - currentCost,\n      buildings: newBuildings\n    }));\n  };\n\n  // Clear all buildings for development testing\n  const clearAllBuildings = () => {\n    console.log('Clearing all buildings for testing purposes');\n    setBuildings({});\n    setGameState(prevState => ({\n      ...prevState,\n      buildings: {}\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"buildings\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Buildings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.entries(buildings).map(([building, {\n        count,\n        cost\n      }]) => {\n        var _buildingStats$buildi2;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [building, \": \", count, \" (Income: \", ((_buildingStats$buildi2 = buildingStats[building]) === null || _buildingStats$buildi2 === void 0 ? void 0 : _buildingStats$buildi2.income) || 0, \" per interval, Next Cost: \", cost, \")\"]\n        }, building, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addBuilding('Cow Pen'),\n      children: \"Add Cow Pen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addBuilding('Wheat Field'),\n      children: \"Add Wheat Field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addBuilding('Varrock'),\n      children: \"Add Varrock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearAllBuildings,\n      children: \"Clear All Buildings (Dev Button)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(Buildings, \"NALJZos7wzddpI6FtNO3nQk/cKs=\");\n_c = Buildings;\nexport default Buildings;\nvar _c;\n$RefreshReg$(_c, \"Buildings\");","map":{"version":3,"names":["React","useState","useEffect","buildingStats","jsxDEV","_jsxDEV","Buildings","gameState","setGameState","_s","buildings","setBuildings","incomeIntervals","Object","entries","map","buildingName","count","interval","setInterval","prevState","currency","income","incomeInterval","forEach","clearInterval","addBuilding","_buildings$buildingNa","_buildings$buildingNa2","_buildingStats$buildi","currentCount","currentCost","cost","costIncreaseModifier","newCost","Math","round","alert","newBuildings","clearAllBuildings","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","building","_buildingStats$buildi2","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/buildings/buildings.js"],"sourcesContent":["// /src/components/buildings/buildings.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport buildingStats from './building-stats.json';\r\n\r\nfunction Buildings({ gameState, setGameState }) {\r\n  const [buildings, setBuildings] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Load existing buildings from gameState if available\r\n    if (gameState && gameState.buildings) {\r\n      setBuildings(gameState.buildings);\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    // Generate income based on building stats\r\n    const incomeIntervals = Object.entries(buildings).map(([buildingName, { count }]) => {\r\n      if (count > 0 && buildingStats[buildingName]) {\r\n        const interval = setInterval(() => {\r\n          setGameState((prevState) => ({\r\n            ...prevState,\r\n            currency: prevState.currency + count * buildingStats[buildingName].income,\r\n          }));\r\n        }, buildingStats[buildingName].incomeInterval);\r\n        return interval;\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // Clear intervals when component unmounts or buildings change\r\n    return () => {\r\n      incomeIntervals.forEach((interval) => {\r\n        if (interval) clearInterval(interval);\r\n      });\r\n    };\r\n  }, [buildings, setGameState]);\r\n\r\n  // Add a new building or increase count if it exists\r\n  const addBuilding = (buildingName) => {\r\n    const currentCount = buildings[buildingName]?.count || 0;\r\n    const currentCost = buildings[buildingName]?.cost || buildingStats[buildingName].cost;\r\n    const costIncreaseModifier = buildingStats[buildingName]?.costIncreaseModifier || 1.15;\r\n    const newCost = Math.round(currentCost * costIncreaseModifier); // Increase cost based on modifier from building-stats.json\r\n\r\n    // Check if user has enough currency to buy the building\r\n    if (gameState.currency < currentCost) {\r\n      alert('Not enough currency to buy this building!');\r\n      return;\r\n    }\r\n\r\n    const newBuildings = {\r\n      ...buildings,\r\n      [buildingName]: {\r\n        count: currentCount + 1,\r\n        cost: newCost,\r\n      },\r\n    };\r\n    setBuildings(newBuildings);\r\n\r\n    // Update gameState with new buildings object and deduct cost\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      currency: prevState.currency - currentCost,\r\n      buildings: newBuildings,\r\n    }));\r\n  };\r\n\r\n  // Clear all buildings for development testing\r\n  const clearAllBuildings = () => {\r\n    console.log('Clearing all buildings for testing purposes');\r\n    setBuildings({});\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      buildings: {},\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"buildings\">\r\n      <h2>Buildings</h2>\r\n      <ul>\r\n        {Object.entries(buildings).map(([building, { count, cost }]) => (\r\n          <li key={building}>{building}: {count} (Income: {buildingStats[building]?.income || 0} per interval, Next Cost: {cost})</li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={() => addBuilding('Cow Pen')}>Add Cow Pen</button>\r\n      <button onClick={() => addBuilding('Wheat Field')}>Add Wheat Field</button>\r\n      <button onClick={() => addBuilding('Varrock')}>Add Varrock</button>\r\n      <button onClick={clearAllBuildings}>Clear All Buildings (Dev Button)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buildings;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,SAASA,CAAC;EAAEC,SAAS;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACA,IAAIK,SAAS,IAAIA,SAAS,CAACG,SAAS,EAAE;MACpCC,YAAY,CAACJ,SAAS,CAACG,SAAS,CAAC;IACnC;EACF,CAAC,EAAE,CAACH,SAAS,CAAC,CAAC;EAEfL,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,eAAe,GAAGC,MAAM,CAACC,OAAO,CAACJ,SAAS,CAAC,CAACK,GAAG,CAAC,CAAC,CAACC,YAAY,EAAE;MAAEC;IAAM,CAAC,CAAC,KAAK;MACnF,IAAIA,KAAK,GAAG,CAAC,IAAId,aAAa,CAACa,YAAY,CAAC,EAAE;QAC5C,MAAME,QAAQ,GAAGC,WAAW,CAAC,MAAM;UACjCX,YAAY,CAAEY,SAAS,KAAM;YAC3B,GAAGA,SAAS;YACZC,QAAQ,EAAED,SAAS,CAACC,QAAQ,GAAGJ,KAAK,GAAGd,aAAa,CAACa,YAAY,CAAC,CAACM;UACrE,CAAC,CAAC,CAAC;QACL,CAAC,EAAEnB,aAAa,CAACa,YAAY,CAAC,CAACO,cAAc,CAAC;QAC9C,OAAOL,QAAQ;MACjB;MACA,OAAO,IAAI;IACb,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXN,eAAe,CAACY,OAAO,CAAEN,QAAQ,IAAK;QACpC,IAAIA,QAAQ,EAAEO,aAAa,CAACP,QAAQ,CAAC;MACvC,CAAC,CAAC;IACJ,CAAC;EACH,CAAC,EAAE,CAACR,SAAS,EAAEF,YAAY,CAAC,CAAC;;EAE7B;EACA,MAAMkB,WAAW,GAAIV,YAAY,IAAK;IAAA,IAAAW,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA;IACpC,MAAMC,YAAY,GAAG,EAAAH,qBAAA,GAAAjB,SAAS,CAACM,YAAY,CAAC,cAAAW,qBAAA,uBAAvBA,qBAAA,CAAyBV,KAAK,KAAI,CAAC;IACxD,MAAMc,WAAW,GAAG,EAAAH,sBAAA,GAAAlB,SAAS,CAACM,YAAY,CAAC,cAAAY,sBAAA,uBAAvBA,sBAAA,CAAyBI,IAAI,KAAI7B,aAAa,CAACa,YAAY,CAAC,CAACgB,IAAI;IACrF,MAAMC,oBAAoB,GAAG,EAAAJ,qBAAA,GAAA1B,aAAa,CAACa,YAAY,CAAC,cAAAa,qBAAA,uBAA3BA,qBAAA,CAA6BI,oBAAoB,KAAI,IAAI;IACtF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,GAAGE,oBAAoB,CAAC,CAAC,CAAC;;IAEhE;IACA,IAAI1B,SAAS,CAACc,QAAQ,GAAGU,WAAW,EAAE;MACpCM,KAAK,CAAC,2CAA2C,CAAC;MAClD;IACF;IAEA,MAAMC,YAAY,GAAG;MACnB,GAAG5B,SAAS;MACZ,CAACM,YAAY,GAAG;QACdC,KAAK,EAAEa,YAAY,GAAG,CAAC;QACvBE,IAAI,EAAEE;MACR;IACF,CAAC;IACDvB,YAAY,CAAC2B,YAAY,CAAC;;IAE1B;IACA9B,YAAY,CAAEY,SAAS,KAAM;MAC3B,GAAGA,SAAS;MACZC,QAAQ,EAAED,SAAS,CAACC,QAAQ,GAAGU,WAAW;MAC1CrB,SAAS,EAAE4B;IACb,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC1D9B,YAAY,CAAC,CAAC,CAAC,CAAC;IAChBH,YAAY,CAAEY,SAAS,KAAM;MAC3B,GAAGA,SAAS;MACZV,SAAS,EAAE,CAAC;IACd,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACEL,OAAA;IAAKqC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBtC,OAAA;MAAAsC,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClB1C,OAAA;MAAAsC,QAAA,EACG9B,MAAM,CAACC,OAAO,CAACJ,SAAS,CAAC,CAACK,GAAG,CAAC,CAAC,CAACiC,QAAQ,EAAE;QAAE/B,KAAK;QAAEe;MAAK,CAAC,CAAC;QAAA,IAAAiB,sBAAA;QAAA,oBACzD5C,OAAA;UAAAsC,QAAA,GAAoBK,QAAQ,EAAC,IAAE,EAAC/B,KAAK,EAAC,YAAU,EAAC,EAAAgC,sBAAA,GAAA9C,aAAa,CAAC6C,QAAQ,CAAC,cAAAC,sBAAA,uBAAvBA,sBAAA,CAAyB3B,MAAM,KAAI,CAAC,EAAC,4BAA0B,EAACU,IAAI,EAAC,GAAC;QAAA,GAA9GgB,QAAQ;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA0G,CAAC;MAAA,CAC7H;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACL1C,OAAA;MAAQ6C,OAAO,EAAEA,CAAA,KAAMxB,WAAW,CAAC,SAAS,CAAE;MAAAiB,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnE1C,OAAA;MAAQ6C,OAAO,EAAEA,CAAA,KAAMxB,WAAW,CAAC,aAAa,CAAE;MAAAiB,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3E1C,OAAA;MAAQ6C,OAAO,EAAEA,CAAA,KAAMxB,WAAW,CAAC,SAAS,CAAE;MAAAiB,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnE1C,OAAA;MAAQ6C,OAAO,EAAEX,iBAAkB;MAAAI,QAAA,EAAC;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1E,CAAC;AAEV;AAACtC,EAAA,CAvFQH,SAAS;AAAA6C,EAAA,GAAT7C,SAAS;AAyFlB,eAAeA,SAAS;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}