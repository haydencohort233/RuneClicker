{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\achievements\\\\achievements.js\",\n  _s = $RefreshSig$();\n// /src/components/achievements/achievements.js\nimport React, { useEffect, useState } from 'react';\nimport styles from './achievements.module.css';\nimport achievementData from './achievements-list.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Achievements({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [achievements, setAchievements] = useState([]);\n\n  // Convert string condition to a function\n  const parseCondition = conditionString => {\n    // eslint-disable-next-line no-new-func\n    return new Function('gs', `return ${conditionString}`);\n  };\n\n  // Load achievements from JSON and parse conditions\n  const achievementList = achievementData.achievements.map(achievement => ({\n    ...achievement,\n    condition: parseCondition(achievement.condition)\n  }));\n  useEffect(() => {\n    // Check for completed achievements\n    const unlockedAchievements = achievementList.filter(achievement => achievement.condition(gameState));\n    setAchievements(unlockedAchievements);\n\n    // Update gameState with only unlocked achievements\n    if (unlockedAchievements.length > 0) {\n      setGameState(prevState => ({\n        ...prevState,\n        achievements: unlockedAchievements.map(achievement => ({\n          id: achievement.id,\n          name: achievement.name\n        }))\n      }));\n    }\n  }, [gameState, setGameState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.achievementsContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Achievements\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.achievementList,\n      children: achievementList.map(achievement => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: gameState.achievements.some(ach => ach.id === achievement.id) ? `${styles.achievementItem} ${styles.achieved}` : styles.achievementItem,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: achievement.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: achievement.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, achievement.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Achievements, \"nKMvePRuBynotSBsIfo1WeQZI2Q=\");\n_c = Achievements;\nexport default Achievements;\nvar _c;\n$RefreshReg$(_c, \"Achievements\");","map":{"version":3,"names":["React","useEffect","useState","styles","achievementData","jsxDEV","_jsxDEV","Achievements","gameState","setGameState","_s","achievements","setAchievements","parseCondition","conditionString","Function","achievementList","map","achievement","condition","unlockedAchievements","filter","length","prevState","id","name","className","achievementsContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","some","ach","achievementItem","achieved","description","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/achievements/achievements.js"],"sourcesContent":["// /src/components/achievements/achievements.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport styles from './achievements.module.css';\r\nimport achievementData from './achievements-list.json';\r\n\r\nfunction Achievements({ gameState, setGameState }) {\r\n  const [achievements, setAchievements] = useState([]);\r\n\r\n  // Convert string condition to a function\r\n  const parseCondition = (conditionString) => {\r\n    // eslint-disable-next-line no-new-func\r\n    return new Function('gs', `return ${conditionString}`);\r\n  };\r\n\r\n  // Load achievements from JSON and parse conditions\r\n  const achievementList = achievementData.achievements.map((achievement) => ({\r\n    ...achievement,\r\n    condition: parseCondition(achievement.condition),\r\n  }));\r\n\r\n  useEffect(() => {\r\n    // Check for completed achievements\r\n    const unlockedAchievements = achievementList.filter((achievement) => achievement.condition(gameState));\r\n    setAchievements(unlockedAchievements);\r\n\r\n    // Update gameState with only unlocked achievements\r\n    if (unlockedAchievements.length > 0) {\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        achievements: unlockedAchievements.map((achievement) => ({\r\n          id: achievement.id,\r\n          name: achievement.name,\r\n        })),\r\n      }));\r\n    }\r\n  }, [gameState, setGameState]);\r\n\r\n  return (\r\n    <div className={styles.achievementsContainer}>\r\n      <h2>Achievements</h2>\r\n      <div className={styles.achievementList}>\r\n        {achievementList.map((achievement) => (\r\n          <div\r\n            key={achievement.id}\r\n            className={\r\n              gameState.achievements.some((ach) => ach.id === achievement.id)\r\n                ? `${styles.achievementItem} ${styles.achieved}`\r\n                : styles.achievementItem\r\n            }\r\n          >\r\n            <h3>{achievement.name}</h3>\r\n            <p>{achievement.description}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Achievements;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,eAAe,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,YAAYA,CAAC;EAAEC,SAAS;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAMW,cAAc,GAAIC,eAAe,IAAK;IAC1C;IACA,OAAO,IAAIC,QAAQ,CAAC,IAAI,EAAE,UAAUD,eAAe,EAAE,CAAC;EACxD,CAAC;;EAED;EACA,MAAME,eAAe,GAAGZ,eAAe,CAACO,YAAY,CAACM,GAAG,CAAEC,WAAW,KAAM;IACzE,GAAGA,WAAW;IACdC,SAAS,EAAEN,cAAc,CAACK,WAAW,CAACC,SAAS;EACjD,CAAC,CAAC,CAAC;EAEHlB,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,oBAAoB,GAAGJ,eAAe,CAACK,MAAM,CAAEH,WAAW,IAAKA,WAAW,CAACC,SAAS,CAACX,SAAS,CAAC,CAAC;IACtGI,eAAe,CAACQ,oBAAoB,CAAC;;IAErC;IACA,IAAIA,oBAAoB,CAACE,MAAM,GAAG,CAAC,EAAE;MACnCb,YAAY,CAAEc,SAAS,KAAM;QAC3B,GAAGA,SAAS;QACZZ,YAAY,EAAES,oBAAoB,CAACH,GAAG,CAAEC,WAAW,KAAM;UACvDM,EAAE,EAAEN,WAAW,CAACM,EAAE;UAClBC,IAAI,EAAEP,WAAW,CAACO;QACpB,CAAC,CAAC;MACJ,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CAACjB,SAAS,EAAEC,YAAY,CAAC,CAAC;EAE7B,oBACEH,OAAA;IAAKoB,SAAS,EAAEvB,MAAM,CAACwB,qBAAsB;IAAAC,QAAA,gBAC3CtB,OAAA;MAAAsB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB1B,OAAA;MAAKoB,SAAS,EAAEvB,MAAM,CAACa,eAAgB;MAAAY,QAAA,EACpCZ,eAAe,CAACC,GAAG,CAAEC,WAAW,iBAC/BZ,OAAA;QAEEoB,SAAS,EACPlB,SAAS,CAACG,YAAY,CAACsB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACV,EAAE,KAAKN,WAAW,CAACM,EAAE,CAAC,GAC3D,GAAGrB,MAAM,CAACgC,eAAe,IAAIhC,MAAM,CAACiC,QAAQ,EAAE,GAC9CjC,MAAM,CAACgC,eACZ;QAAAP,QAAA,gBAEDtB,OAAA;UAAAsB,QAAA,EAAKV,WAAW,CAACO;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC3B1B,OAAA;UAAAsB,QAAA,EAAIV,WAAW,CAACmB;QAAW;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAR3Bd,WAAW,CAACM,EAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAShB,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACtB,EAAA,CApDQH,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAsDrB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}