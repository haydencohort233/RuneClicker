{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\buildings\\\\buildings.js\",\n  _s = $RefreshSig$();\n// /src/components/buildings/buildings.js\nimport styles from './buildings.module.css';\nimport buildingStats from './building-stats.json';\nimport React, { useState, useEffect } from 'react';\nimport fallbackImage from '../../assets/images/buildings/fallback.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Buildings({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [buildings, setBuildings] = useState(() => {\n    // Initialize all buildings with a count of 0\n    const initialBuildings = {};\n    for (const buildingName in buildingStats) {\n      if (buildingStats.hasOwnProperty(buildingName)) {\n        initialBuildings[buildingName] = {\n          count: 0,\n          cost: buildingStats[buildingName].cost\n        };\n      }\n    }\n    return initialBuildings;\n  });\n  useEffect(() => {\n    // Load existing buildings from gameState if available, otherwise initialize with base stats\n    if (gameState && gameState.buildings) {\n      setBuildings(prevBuildings => {\n        const updatedBuildings = {\n          ...prevBuildings\n        };\n        for (const buildingName in buildingStats) {\n          if (buildingStats.hasOwnProperty(buildingName)) {\n            if (gameState.buildings[buildingName]) {\n              updatedBuildings[buildingName] = gameState.buildings[buildingName];\n            } else {\n              updatedBuildings[buildingName] = {\n                count: 0,\n                cost: buildingStats[buildingName].cost\n              };\n            }\n          }\n        }\n        return updatedBuildings;\n      });\n    }\n  }, [gameState]);\n  useEffect(() => {\n    // Generate income based on building stats\n    const incomeIntervals = Object.entries(buildings).map(([buildingName, {\n      count\n    }]) => {\n      if (count > 0 && buildingStats[buildingName]) {\n        const interval = setInterval(() => {\n          setGameState(prevState => ({\n            ...prevState,\n            currency: prevState.currency + count * buildingStats[buildingName].income\n          }));\n        }, buildingStats[buildingName].incomeInterval);\n        return interval;\n      }\n      return null;\n    });\n\n    // Clear intervals when component unmounts or buildings change\n    return () => {\n      incomeIntervals.forEach(interval => {\n        if (interval) clearInterval(interval);\n      });\n    };\n  }, [buildings, setGameState]);\n\n  // Add a new building or increase count if it exists\n  const addBuilding = buildingName => {\n    var _buildings$buildingNa, _buildings$buildingNa2, _buildingStats$buildi, _buildingStats$buildi2;\n    const currentCount = ((_buildings$buildingNa = buildings[buildingName]) === null || _buildings$buildingNa === void 0 ? void 0 : _buildings$buildingNa.count) || 0;\n    const currentCost = ((_buildings$buildingNa2 = buildings[buildingName]) === null || _buildings$buildingNa2 === void 0 ? void 0 : _buildings$buildingNa2.cost) || buildingStats[buildingName].cost;\n    const costIncreaseModifier = ((_buildingStats$buildi = buildingStats[buildingName]) === null || _buildingStats$buildi === void 0 ? void 0 : _buildingStats$buildi.costIncreaseModifier) || 1.15;\n    const newCost = Math.round(currentCost * costIncreaseModifier); // Increase cost based on modifier from building-stats.json\n\n    // Check if user has enough currency to buy the building\n    if (gameState.currency < currentCost) {\n      alert('Not enough currency to buy this building!');\n      return;\n    }\n    const newBuildings = {\n      ...buildings,\n      [buildingName]: {\n        count: currentCount + 1,\n        cost: newCost\n      }\n    };\n    setBuildings(newBuildings);\n\n    // Update gameState with new buildings object, deduct cost, and add experience\n    const expReward = ((_buildingStats$buildi2 = buildingStats[buildingName]) === null || _buildingStats$buildi2 === void 0 ? void 0 : _buildingStats$buildi2.expReward) || 0;\n    setGameState(prevState => ({\n      ...prevState,\n      currency: prevState.currency - currentCost,\n      buildings: newBuildings,\n      experience: prevState.experience + expReward\n    }));\n  };\n\n  // Clear all buildings for development testing\n  const clearAllBuildings = () => {\n    console.log('Clearing all buildings for testing purposes');\n    const clearedBuildings = {};\n    for (const buildingName in buildingStats) {\n      if (buildingStats.hasOwnProperty(buildingName)) {\n        clearedBuildings[buildingName] = {\n          count: 0,\n          cost: buildingStats[buildingName].cost\n        };\n      }\n    }\n    setBuildings(clearedBuildings);\n    setGameState(prevState => ({\n      ...prevState,\n      buildings: clearedBuildings\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.buildings,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Buildings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buildingList,\n      children: Object.entries(buildings).map(([building, {\n        count,\n        cost\n      }]) => {\n        var _buildingStats$buildi3;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buildingItem,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: require(`../../assets/images/buildings/building_${building.toLowerCase().replace(/ /g, '_')}.png`).default,\n            alt: building,\n            className: styles.buildingThumbnail,\n            onError: e => e.target.src = fallbackImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buildingTitle,\n            children: building\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buildingDetails,\n            children: [\"Count: \", count, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 30\n            }, this), \"Income: \", ((_buildingStats$buildi3 = buildingStats[building]) === null || _buildingStats$buildi3 === void 0 ? void 0 : _buildingStats$buildi3.income) || 0, \" per interval \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 75\n            }, this), \"Next Cost: \", cost.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => addBuilding(building),\n            className: styles.buildingButton,\n            children: \"Buy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, building, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearAllBuildings,\n      className: `${styles.buildingButton} ${styles.devButton}`,\n      children: \"Clear All Buildings (Dev Button)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(Buildings, \"d/dssbYkqCXgZvO49zS/VSN9XMk=\");\n_c = Buildings;\nexport default Buildings;\nvar _c;\n$RefreshReg$(_c, \"Buildings\");","map":{"version":3,"names":["styles","buildingStats","React","useState","useEffect","fallbackImage","jsxDEV","_jsxDEV","Buildings","gameState","setGameState","_s","buildings","setBuildings","initialBuildings","buildingName","hasOwnProperty","count","cost","prevBuildings","updatedBuildings","incomeIntervals","Object","entries","map","interval","setInterval","prevState","currency","income","incomeInterval","forEach","clearInterval","addBuilding","_buildings$buildingNa","_buildings$buildingNa2","_buildingStats$buildi","_buildingStats$buildi2","currentCount","currentCost","costIncreaseModifier","newCost","Math","round","alert","newBuildings","expReward","experience","clearAllBuildings","console","log","clearedBuildings","className","children","fileName","_jsxFileName","lineNumber","columnNumber","buildingList","building","_buildingStats$buildi3","buildingItem","src","require","toLowerCase","replace","default","alt","buildingThumbnail","onError","e","target","buildingTitle","buildingDetails","toLocaleString","onClick","buildingButton","devButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/buildings/buildings.js"],"sourcesContent":["// /src/components/buildings/buildings.js\r\nimport styles from './buildings.module.css';\r\nimport buildingStats from './building-stats.json';\r\nimport React, { useState, useEffect } from 'react';\r\nimport fallbackImage from '../../assets/images/buildings/fallback.png';\r\n\r\nfunction Buildings({ gameState, setGameState }) {\r\n  const [buildings, setBuildings] = useState(() => {\r\n    // Initialize all buildings with a count of 0\r\n    const initialBuildings = {};\r\n    for (const buildingName in buildingStats) {\r\n      if (buildingStats.hasOwnProperty(buildingName)) {\r\n        initialBuildings[buildingName] = {\r\n          count: 0,\r\n          cost: buildingStats[buildingName].cost,\r\n        };\r\n      }\r\n    }\r\n    return initialBuildings;\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Load existing buildings from gameState if available, otherwise initialize with base stats\r\n    if (gameState && gameState.buildings) {\r\n      setBuildings((prevBuildings) => {\r\n        const updatedBuildings = { ...prevBuildings };\r\n        for (const buildingName in buildingStats) {\r\n          if (buildingStats.hasOwnProperty(buildingName)) {\r\n            if (gameState.buildings[buildingName]) {\r\n              updatedBuildings[buildingName] = gameState.buildings[buildingName];\r\n            } else {\r\n              updatedBuildings[buildingName] = {\r\n                count: 0,\r\n                cost: buildingStats[buildingName].cost,\r\n              };\r\n            }\r\n          }\r\n        }\r\n        return updatedBuildings;\r\n      });\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    // Generate income based on building stats\r\n    const incomeIntervals = Object.entries(buildings).map(([buildingName, { count }]) => {\r\n      if (count > 0 && buildingStats[buildingName]) {\r\n        const interval = setInterval(() => {\r\n          setGameState((prevState) => ({\r\n            ...prevState,\r\n            currency: prevState.currency + count * buildingStats[buildingName].income,\r\n          }));\r\n        }, buildingStats[buildingName].incomeInterval);\r\n        return interval;\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // Clear intervals when component unmounts or buildings change\r\n    return () => {\r\n      incomeIntervals.forEach((interval) => {\r\n        if (interval) clearInterval(interval);\r\n      });\r\n    };\r\n  }, [buildings, setGameState]);\r\n\r\n  // Add a new building or increase count if it exists\r\n  const addBuilding = (buildingName) => {\r\n    const currentCount = buildings[buildingName]?.count || 0;\r\n    const currentCost = buildings[buildingName]?.cost || buildingStats[buildingName].cost;\r\n    const costIncreaseModifier = buildingStats[buildingName]?.costIncreaseModifier || 1.15;\r\n    const newCost = Math.round(currentCost * costIncreaseModifier); // Increase cost based on modifier from building-stats.json\r\n\r\n    // Check if user has enough currency to buy the building\r\n    if (gameState.currency < currentCost) {\r\n      alert('Not enough currency to buy this building!');\r\n      return;\r\n    }\r\n\r\n    const newBuildings = {\r\n      ...buildings,\r\n      [buildingName]: {\r\n        count: currentCount + 1,\r\n        cost: newCost,\r\n      },\r\n    };\r\n    setBuildings(newBuildings);\r\n\r\n    // Update gameState with new buildings object, deduct cost, and add experience\r\n    const expReward = buildingStats[buildingName]?.expReward || 0;\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      currency: prevState.currency - currentCost,\r\n      buildings: newBuildings,\r\n      experience: prevState.experience + expReward,\r\n    }));\r\n  };\r\n\r\n  // Clear all buildings for development testing\r\n  const clearAllBuildings = () => {\r\n    console.log('Clearing all buildings for testing purposes');\r\n    const clearedBuildings = {};\r\n    for (const buildingName in buildingStats) {\r\n      if (buildingStats.hasOwnProperty(buildingName)) {\r\n        clearedBuildings[buildingName] = {\r\n          count: 0,\r\n          cost: buildingStats[buildingName].cost,\r\n        };\r\n      }\r\n    }\r\n    setBuildings(clearedBuildings);\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      buildings: clearedBuildings,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.buildings}>\r\n      <h2>Buildings</h2>\r\n      <div className={styles.buildingList}>\r\n        {Object.entries(buildings).map(([building, { count, cost }]) => (\r\n          <div key={building} className={styles.buildingItem}>\r\n            <img \r\n              src={require(`../../assets/images/buildings/building_${building.toLowerCase().replace(/ /g, '_')}.png`).default} \r\n              alt={building}\r\n              className={styles.buildingThumbnail}\r\n              onError={(e) => e.target.src = fallbackImage}\r\n            />\r\n            <div className={styles.buildingTitle}>{building}</div>\r\n            <div className={styles.buildingDetails}>\r\n              Count: {count} <br />\r\n              Income: {buildingStats[building]?.income || 0} per interval <br />\r\n              Next Cost: {cost.toLocaleString()}\r\n            </div>\r\n            <button onClick={() => addBuilding(building)} className={styles.buildingButton}>Buy</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={clearAllBuildings} className={`${styles.buildingButton} ${styles.devButton}`}>Clear All Buildings (Dev Button)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buildings;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}