{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\worldmap\\\\worldMap.js\",\n  _s = $RefreshSig$();\n// worldMap.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport styles from './worldMap.module.css';\nimport worldLocations from './worldLocations.json';\nimport mapIcon from '../../assets/images/icons/map.png';\nimport worldMapImage from '../../assets/images/worldmap/worldmap.png';\nimport markerAvailable from '../../assets/images/worldmap/icons/marker_available.png';\nimport markerUnavailable from '../../assets/images/worldmap/icons/marker_unavailable.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WorldMap({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [isMapOpen, setIsMapOpen] = useState(false);\n  const [hoveredLocation, setHoveredLocation] = useState(null);\n  const [timeRemaining, setTimeRemaining] = useState(null);\n  const timerRef = useRef(null);\n  useEffect(() => {\n    if (gameState.travel && gameState.travel.isTraveling) {\n      const startTime = Date.now();\n      const endTime = startTime + gameState.travel.timeRemaining * 1000;\n      setTimeRemaining(Math.ceil((endTime - Date.now()) / 1000));\n      timerRef.current = setInterval(() => {\n        const remainingTime = Math.ceil((endTime - Date.now()) / 1000);\n        if (remainingTime > 0) {\n          setTimeRemaining(remainingTime);\n        } else {\n          clearInterval(timerRef.current);\n          setTimeRemaining(0);\n        }\n      }, 1000);\n      return () => clearInterval(timerRef.current);\n    } else {\n      setTimeRemaining(null);\n    }\n  }, [gameState.travel]);\n\n  // Toggle map visibility\n  const toggleMap = () => {\n    setIsMapOpen(prev => !prev);\n  };\n\n  // Handle traveling prompt to a specific location\n  const promptTravelToLocation = location => {\n    if (gameState.currentLocation === location.id) {\n      console.log(\"You are already at this location.\");\n      return;\n    }\n    const confirmTravel = window.confirm(`Do you want to travel to ${location.name}?`);\n    if (confirmTravel) {\n      startTravel(location);\n    }\n  };\n\n  // Start traveling to the selected location\n  const startTravel = location => {\n    console.log(`Begin traveling to ${location.name}`);\n    const startTime = Date.now();\n    const travelTimeInMs = location.travelTime * 1000;\n    const endTime = startTime + travelTimeInMs;\n\n    // Set travel state in gameState\n    setGameState(prevState => {\n      const newGameState = {\n        ...prevState,\n        travel: {\n          currentLocation: prevState.currentLocation,\n          destination: location.name,\n          timeRemaining: location.travelTime,\n          // Use location's configurable travel time\n          isTraveling: true\n        }\n      };\n      console.log(\"Updated Game State (Start Travel): \", newGameState);\n      return newGameState;\n    });\n    timerRef.current = setInterval(() => {\n      const remainingTime = Math.ceil((endTime - Date.now()) / 1000);\n      if (remainingTime > 0) {\n        setTimeRemaining(remainingTime);\n      } else {\n        clearInterval(timerRef.current);\n        setTimeRemaining(0);\n        completeTravel(location);\n      }\n    }, 1000);\n  };\n\n  // Complete travel to the destination\n  const completeTravel = location => {\n    // Update gameState once travel is complete\n    setGameState(prevState => {\n      const completedGameState = {\n        ...prevState,\n        currentLocation: location.id,\n        travel: {\n          currentLocation: location.id,\n          destination: '',\n          timeRemaining: 0,\n          isTraveling: false\n        }\n      };\n      console.log(\"Updated Game State (Travel Complete): \", completedGameState);\n      return completedGameState;\n    });\n\n    // Optionally save the game state after traveling\n    // saveGameToServer(); // Uncomment this if save function is available\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.worldMapContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleMap,\n      className: styles.mapButton,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: mapIcon,\n        alt: \"Map\",\n        className: styles.mapIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.currentLocation,\n      children: [\"Currently at: \", gameState.currentLocation]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), gameState.travel && gameState.travel.isTraveling && timeRemaining !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.timeRemaining,\n      children: [\"Time until arrival: \", timeRemaining, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), isMapOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.mapModal,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: worldMapImage,\n        alt: \"World Map\",\n        className: styles.mapImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.locationsContainer,\n        children: worldLocations.map(location => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.locationMarker,\n            style: {\n              top: location.coordinates.top,\n              left: location.coordinates.left,\n              backgroundImage: `url(${gameState.currentLocation === location.id ? markerUnavailable : markerAvailable})`\n            },\n            onClick: () => promptTravelToLocation(location)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this)\n        }, location.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMap,\n        className: styles.closeButton,\n        children: \"Close Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(WorldMap, \"yTFCnAHxwiAbhwzlL/5KKDBoWKM=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styles","worldLocations","mapIcon","worldMapImage","markerAvailable","markerUnavailable","jsxDEV","_jsxDEV","WorldMap","gameState","setGameState","_s","isMapOpen","setIsMapOpen","hoveredLocation","setHoveredLocation","timeRemaining","setTimeRemaining","timerRef","travel","isTraveling","startTime","Date","now","endTime","Math","ceil","current","setInterval","remainingTime","clearInterval","toggleMap","prev","promptTravelToLocation","location","currentLocation","id","console","log","confirmTravel","window","confirm","name","startTravel","travelTimeInMs","travelTime","prevState","newGameState","destination","completeTravel","completedGameState","className","worldMapContainer","children","onClick","mapButton","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","mapModal","mapImage","locationsContainer","map","locationMarker","style","top","coordinates","left","backgroundImage","closeButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/worldmap/worldMap.js"],"sourcesContent":["// worldMap.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport styles from './worldMap.module.css';\r\nimport worldLocations from './worldLocations.json';\r\nimport mapIcon from '../../assets/images/icons/map.png';\r\nimport worldMapImage from '../../assets/images/worldmap/worldmap.png';\r\nimport markerAvailable from '../../assets/images/worldmap/icons/marker_available.png';\r\nimport markerUnavailable from '../../assets/images/worldmap/icons/marker_unavailable.png';\r\n\r\nfunction WorldMap({ gameState, setGameState }) {\r\n  const [isMapOpen, setIsMapOpen] = useState(false);\r\n  const [hoveredLocation, setHoveredLocation] = useState(null);\r\n  const [timeRemaining, setTimeRemaining] = useState(null);\r\n  const timerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (gameState.travel && gameState.travel.isTraveling) {\r\n      const startTime = Date.now();\r\n      const endTime = startTime + gameState.travel.timeRemaining * 1000;\r\n      setTimeRemaining(Math.ceil((endTime - Date.now()) / 1000));\r\n\r\n      timerRef.current = setInterval(() => {\r\n        const remainingTime = Math.ceil((endTime - Date.now()) / 1000);\r\n        if (remainingTime > 0) {\r\n          setTimeRemaining(remainingTime);\r\n        } else {\r\n          clearInterval(timerRef.current);\r\n          setTimeRemaining(0);\r\n        }\r\n      }, 1000);\r\n\r\n      return () => clearInterval(timerRef.current);\r\n    } else {\r\n      setTimeRemaining(null);\r\n    }\r\n  }, [gameState.travel]);\r\n\r\n  // Toggle map visibility\r\n  const toggleMap = () => {\r\n    setIsMapOpen((prev) => !prev);\r\n  };\r\n\r\n  // Handle traveling prompt to a specific location\r\n  const promptTravelToLocation = (location) => {\r\n    if (gameState.currentLocation === location.id) {\r\n      console.log(\"You are already at this location.\");\r\n      return;\r\n    }\r\n\r\n    const confirmTravel = window.confirm(`Do you want to travel to ${location.name}?`);\r\n    if (confirmTravel) {\r\n      startTravel(location);\r\n    }\r\n  };\r\n\r\n  // Start traveling to the selected location\r\n  const startTravel = (location) => {\r\n    console.log(`Begin traveling to ${location.name}`);\r\n\r\n    const startTime = Date.now();\r\n    const travelTimeInMs = location.travelTime * 1000;\r\n    const endTime = startTime + travelTimeInMs;\r\n\r\n    // Set travel state in gameState\r\n    setGameState((prevState) => {\r\n      const newGameState = {\r\n        ...prevState,\r\n        travel: {\r\n          currentLocation: prevState.currentLocation,\r\n          destination: location.name,\r\n          timeRemaining: location.travelTime, // Use location's configurable travel time\r\n          isTraveling: true,\r\n        },\r\n      };\r\n      console.log(\"Updated Game State (Start Travel): \", newGameState);\r\n      return newGameState;\r\n    });\r\n\r\n    timerRef.current = setInterval(() => {\r\n      const remainingTime = Math.ceil((endTime - Date.now()) / 1000);\r\n      if (remainingTime > 0) {\r\n        setTimeRemaining(remainingTime);\r\n      } else {\r\n        clearInterval(timerRef.current);\r\n        setTimeRemaining(0);\r\n        completeTravel(location);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  // Complete travel to the destination\r\n  const completeTravel = (location) => {\r\n    // Update gameState once travel is complete\r\n    setGameState((prevState) => {\r\n      const completedGameState = {\r\n        ...prevState,\r\n        currentLocation: location.id,\r\n        travel: {\r\n          currentLocation: location.id,\r\n          destination: '',\r\n          timeRemaining: 0,\r\n          isTraveling: false,\r\n        },\r\n      };\r\n      console.log(\"Updated Game State (Travel Complete): \", completedGameState);\r\n      return completedGameState;\r\n    });\r\n\r\n    // Optionally save the game state after traveling\r\n    // saveGameToServer(); // Uncomment this if save function is available\r\n  };\r\n\r\n  return (\r\n    <div className={styles.worldMapContainer}>\r\n      <button onClick={toggleMap} className={styles.mapButton}>\r\n        <img src={mapIcon} alt=\"Map\" className={styles.mapIcon} />\r\n      </button>\r\n\r\n      {/* Display Current Location */}\r\n      <p className={styles.currentLocation}>Currently at: {gameState.currentLocation}</p>\r\n\r\n      {/* Display Time Remaining if Traveling */}\r\n      {gameState.travel && gameState.travel.isTraveling && timeRemaining !== null && (\r\n        <p className={styles.timeRemaining}>Time until arrival: {timeRemaining} seconds</p>\r\n      )}\r\n\r\n      {isMapOpen && (\r\n        <div className={styles.mapModal}>\r\n          <img src={worldMapImage} alt=\"World Map\" className={styles.mapImage} />\r\n          <div className={styles.locationsContainer}>\r\n            {worldLocations.map((location) => (\r\n              <div key={location.id}>\r\n                {/* Location Marker */}\r\n                <div\r\n                  className={styles.locationMarker}\r\n                  style={{\r\n                    top: location.coordinates.top,\r\n                    left: location.coordinates.left,\r\n                    backgroundImage: `url(${\r\n                      gameState.currentLocation === location.id\r\n                        ? markerUnavailable\r\n                        : markerAvailable\r\n                    })`,\r\n                  }}\r\n                  onClick={() => promptTravelToLocation(location)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <button onClick={toggleMap} className={styles.closeButton}>Close Map</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}