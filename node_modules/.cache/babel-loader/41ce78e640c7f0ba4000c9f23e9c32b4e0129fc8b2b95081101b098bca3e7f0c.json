{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\currency\\\\currency.js\",\n  _s = $RefreshSig$();\n// /src/components/currency/currency.js\nimport React, { useState, useEffect } from 'react';\nimport buildingStats from '../buildings/building-stats.json';\nimport styles from './currency.module.css';\nimport currency1 from '../../assets/images/currency/currency_1.png';\nimport currency2 from '../../assets/images/currency/currency_2.png';\nimport currency3 from '../../assets/images/currency/currency_3.png';\nimport currency4 from '../../assets/images/currency/currency_4.png';\nimport currency5 from '../../assets/images/currency/currency_5.png';\nimport currency6 from '../../assets/images/currency/currency_6.png';\nimport currency7 from '../../assets/images/currency/currency_7.png';\nimport currency8 from '../../assets/images/currency/currency_8.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Currency({\n  gameState,\n  setGameState = () => {}\n}) {\n  _s();\n  const [currency, setCurrency] = useState(0);\n  const [totalIncome, setTotalIncome] = useState(0);\n  const [currencyText, setCurrencyText] = useState('');\n\n  // Load currency from gameState when component mounts\n  useEffect(() => {\n    if (gameState && gameState.currency !== undefined) {\n      setCurrency(gameState.currency);\n    }\n  }, [gameState.currency]);\n\n  // Calculate total income whenever buildings change\n  useEffect(() => {\n    if (gameState && gameState.buildings) {\n      let income = 0;\n      for (const [buildingName, {\n        count\n      }] of Object.entries(gameState.buildings)) {\n        if (count > 0 && buildingStats[buildingName]) {\n          const buildingIncome = buildingStats[buildingName].income;\n          income += buildingIncome * count;\n        }\n      }\n      setTotalIncome(income);\n    }\n  }, [gameState.buildings]);\n\n  // Update gameState whenever currency changes\n  useEffect(() => {\n    if (typeof setGameState === 'function') {\n      setGameState(prevState => ({\n        ...prevState,\n        currency: currency\n      }));\n    }\n    // Update currency text when currency changes\n    if (currency >= 5000) {\n      setCurrencyText('Wealthy');\n    } else if (currency >= 1500) {\n      setCurrencyText('Well-off');\n    } else if (currency >= 500) {\n      setCurrencyText('Comfortable');\n    } else if (currency >= 100) {\n      setCurrencyText('Getting there');\n    } else if (currency >= 50) {\n      setCurrencyText('On the rise');\n    } else if (currency >= 20) {\n      setCurrencyText('Starting out');\n    } else {\n      setCurrencyText('Broke');\n    }\n  }, [currency, setGameState]);\n\n  // Function to increment currency\n  const incrementCurrency = () => {\n    setCurrency(prevCurrency => prevCurrency + 1);\n  };\n\n  // Function to clear currency\n  const clearCurrency = () => {\n    console.log('Clearing currency for testing purposes');\n    setCurrency(0);\n  };\n\n  // Determine which currency image to display based on the amount of currency\n  const getCurrencyImage = () => {\n    if (currency >= 5000) return currency8;\n    if (currency >= 1500) return currency7;\n    if (currency >= 500) return currency6;\n    if (currency >= 250) return currency5;\n    if (currency >= 100) return currency4;\n    if (currency >= 50) return currency3;\n    if (currency >= 20) return currency2;\n    return currency1;\n  };\n\n  // Format currency with commas\n  const formatCurrency = value => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.currencyContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: getCurrencyImage(),\n      alt: \"Currency Icon\",\n      className: styles.currencyIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: currency >= 10000000 ? styles.currencyAmountHigh : '',\n        children: [\"Currency: \", formatCurrency(currency), \" (\", currencyText, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Total Income per Second: \", formatCurrency(totalIncome)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCurrency,\n      children: \"Earn Currency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearCurrency,\n      children: \"Clear Currency (Dev Button)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(Currency, \"n6qoiWqR/H9XfazkssizjRs2LiI=\");\n_c = Currency;\nexport default Currency;\nvar _c;\n$RefreshReg$(_c, \"Currency\");","map":{"version":3,"names":["React","useState","useEffect","buildingStats","styles","currency1","currency2","currency3","currency4","currency5","currency6","currency7","currency8","jsxDEV","_jsxDEV","Currency","gameState","setGameState","_s","currency","setCurrency","totalIncome","setTotalIncome","currencyText","setCurrencyText","undefined","buildings","income","buildingName","count","Object","entries","buildingIncome","prevState","incrementCurrency","prevCurrency","clearCurrency","console","log","getCurrencyImage","formatCurrency","value","toString","replace","className","currencyContainer","children","src","alt","currencyIcon","fileName","_jsxFileName","lineNumber","columnNumber","currencyAmountHigh","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/currency/currency.js"],"sourcesContent":["// /src/components/currency/currency.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport buildingStats from '../buildings/building-stats.json';\r\nimport styles from './currency.module.css';\r\nimport currency1 from '../../assets/images/currency/currency_1.png';\r\nimport currency2 from '../../assets/images/currency/currency_2.png';\r\nimport currency3 from '../../assets/images/currency/currency_3.png';\r\nimport currency4 from '../../assets/images/currency/currency_4.png';\r\nimport currency5 from '../../assets/images/currency/currency_5.png';\r\nimport currency6 from '../../assets/images/currency/currency_6.png';\r\nimport currency7 from '../../assets/images/currency/currency_7.png';\r\nimport currency8 from '../../assets/images/currency/currency_8.png';\r\n\r\nfunction Currency({ gameState, setGameState = () => {} }) {\r\n  const [currency, setCurrency] = useState(0);\r\n  const [totalIncome, setTotalIncome] = useState(0);\r\n  const [currencyText, setCurrencyText] = useState('');\r\n\r\n  // Load currency from gameState when component mounts\r\n  useEffect(() => {\r\n    if (gameState && gameState.currency !== undefined) {\r\n      setCurrency(gameState.currency);\r\n    }\r\n  }, [gameState.currency]);\r\n\r\n  // Calculate total income whenever buildings change\r\n  useEffect(() => {\r\n    if (gameState && gameState.buildings) {\r\n      let income = 0;\r\n      for (const [buildingName, { count }] of Object.entries(gameState.buildings)) {\r\n        if (count > 0 && buildingStats[buildingName]) {\r\n          const buildingIncome = buildingStats[buildingName].income;\r\n          income += buildingIncome * count;\r\n        }\r\n      }\r\n      setTotalIncome(income);\r\n    }\r\n  }, [gameState.buildings]);\r\n\r\n  // Update gameState whenever currency changes\r\n  useEffect(() => {\r\n    if (typeof setGameState === 'function') {\r\n      setGameState(prevState => ({\r\n        ...prevState,\r\n        currency: currency\r\n      }));\r\n    }\r\n    // Update currency text when currency changes\r\n    if (currency >= 5000) {\r\n      setCurrencyText('Wealthy');\r\n    } else if (currency >= 1500) {\r\n      setCurrencyText('Well-off');\r\n    } else if (currency >= 500) {\r\n      setCurrencyText('Comfortable');\r\n    } else if (currency >= 100) {\r\n      setCurrencyText('Getting there');\r\n    } else if (currency >= 50) {\r\n      setCurrencyText('On the rise');\r\n    } else if (currency >= 20) {\r\n      setCurrencyText('Starting out');\r\n    } else {\r\n      setCurrencyText('Broke');\r\n    }\r\n  }, [currency, setGameState]);\r\n\r\n  // Function to increment currency\r\n  const incrementCurrency = () => {\r\n    setCurrency(prevCurrency => prevCurrency + 1);\r\n  };\r\n\r\n  // Function to clear currency\r\n  const clearCurrency = () => {\r\n    console.log('Clearing currency for testing purposes');\r\n    setCurrency(0);\r\n  };\r\n\r\n  // Determine which currency image to display based on the amount of currency\r\n  const getCurrencyImage = () => {\r\n    if (currency >= 5000) return currency8;\r\n    if (currency >= 1500) return currency7;\r\n    if (currency >= 500) return currency6;\r\n    if (currency >= 250) return currency5;\r\n    if (currency >= 100) return currency4;\r\n    if (currency >= 50) return currency3;\r\n    if (currency >= 20) return currency2;\r\n    return currency1;\r\n  };\r\n\r\n  // Format currency with commas\r\n  const formatCurrency = (value) => {\r\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  };\r\n\r\n  return (\r\n    <div className={styles.currencyContainer}>\r\n      <img src={getCurrencyImage()} alt=\"Currency Icon\" className={styles.currencyIcon} />\r\n      <div>\r\n        <h3 className={currency >= 10000000 ? styles.currencyAmountHigh : ''}>Currency: {formatCurrency(currency)} ({currencyText})</h3>\r\n        <h4>Total Income per Second: {formatCurrency(totalIncome)}</h4>\r\n      </div>\r\n      <button onClick={incrementCurrency}>Earn Currency</button>\r\n      <button onClick={clearCurrency}>Clear Currency (Dev Button)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Currency;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}