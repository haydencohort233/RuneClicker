{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\users\\\\Login.js\",\n  _s = $RefreshSig$();\n// /src/components/users/Login.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login({\n  setUserId,\n  setGameState\n}) {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isRegistered, setIsRegistered] = useState(true); // Toggles between login and register\n\n  const handleLogin = async () => {\n    try {\n      // Clear game state before attempting to login to prevent data carryover\n      if (setGameState) {\n        setGameState({\n          currency: 0,\n          buildings: {},\n          achievements: {},\n          last_active: null,\n          clicks: 0,\n          currentLocation: \"spawn\",\n          travel: null\n        });\n      } else {\n        console.error('setGameState is not a function');\n      }\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUserId(data.userId);\n        alert('Login successful');\n        console.log('Login successful');\n\n        // Attempt to load the game save automatically after login\n        try {\n          const loadResponse = await fetch(`http://localhost:5000/api/load-game/${data.userId}`);\n          if (loadResponse.ok) {\n            const gameData = await loadResponse.json();\n            if (setGameState) {\n              setGameState(prevState => ({\n                ...prevState,\n                ...gameData.gameState\n              }));\n              console.log('Game state loaded successfully:', gameData.gameState);\n            }\n          } else {\n            console.error('No saved game found to load. Player can manually load later.');\n          }\n        } catch (loadError) {\n          console.error('Failed to load game state after login:', loadError);\n        }\n      } else {\n        alert('Login failed: Invalid credentials');\n        console.error('Login failed');\n      }\n    } catch (error) {\n      alert('Failed to log in. Please try again later.');\n      console.error('Failed to log in:', error);\n    }\n  };\n  const handleRegister = async () => {\n    try {\n      const initialGameState = {\n        currency: 0,\n        buildings: {},\n        achievements: {\n          gain_100_currency: false,\n          click_100_times: false\n        },\n        last_active: new Date().toISOString()\n      };\n      const response = await fetch('http://localhost:5000/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          gameState: initialGameState\n        })\n      });\n      if (response.ok) {\n        alert('Registration successful');\n        console.log('Registration successful');\n        setIsRegistered(true);\n      } else if (response.status === 409) {\n        alert('Email already exists. Please choose a different email.');\n      } else {\n        alert('Registration failed. Please try again.');\n        console.error('Registration failed');\n      }\n    } catch (error) {\n      alert('Failed to register. Please try again later.');\n      console.error('Failed to register:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isRegistered ? \"Login\" : \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Email\",\n      value: email,\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isRegistered ? handleLogin : handleRegister,\n      children: isRegistered ? \"Login\" : \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsRegistered(!isRegistered),\n      children: isRegistered ? \"Need to register?\" : \"Already have an account?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"tCGNHS7Zf+vbcAFtnxhb0a9Bjf0=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Login","setUserId","setGameState","_s","email","setEmail","password","setPassword","isRegistered","setIsRegistered","handleLogin","currency","buildings","achievements","last_active","clicks","currentLocation","travel","console","error","response","fetch","method","headers","body","JSON","stringify","ok","data","json","userId","alert","log","loadResponse","gameData","prevState","gameState","loadError","handleRegister","initialGameState","gain_100_currency","click_100_times","Date","toISOString","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/users/Login.js"],"sourcesContent":["// /src/components/users/Login.js\r\nimport React, { useState } from 'react';\r\n\r\nfunction Login({ setUserId, setGameState }) {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isRegistered, setIsRegistered] = useState(true); // Toggles between login and register\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      // Clear game state before attempting to login to prevent data carryover\r\n      if (setGameState) {\r\n        setGameState({\r\n          currency: 0,\r\n          buildings: {},\r\n          achievements: {},\r\n          last_active: null,\r\n          clicks: 0,\r\n          currentLocation: \"spawn\",\r\n          travel: null,\r\n        });\r\n      } else {\r\n        console.error('setGameState is not a function');\r\n      }\r\n\r\n      const response = await fetch('http://localhost:5000/api/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setUserId(data.userId);\r\n        alert('Login successful');\r\n        console.log('Login successful');\r\n        \r\n        // Attempt to load the game save automatically after login\r\n        try {\r\n          const loadResponse = await fetch(`http://localhost:5000/api/load-game/${data.userId}`);\r\n          if (loadResponse.ok) {\r\n            const gameData = await loadResponse.json();\r\n            if (setGameState) {\r\n              setGameState((prevState) => ({\r\n                ...prevState,\r\n                ...gameData.gameState,\r\n              }));\r\n              console.log('Game state loaded successfully:', gameData.gameState);\r\n            }\r\n          } else {\r\n            console.error('No saved game found to load. Player can manually load later.');\r\n          }\r\n        } catch (loadError) {\r\n          console.error('Failed to load game state after login:', loadError);\r\n        }\r\n      } else {\r\n        alert('Login failed: Invalid credentials');\r\n        console.error('Login failed');\r\n      }\r\n    } catch (error) {\r\n      alert('Failed to log in. Please try again later.');\r\n      console.error('Failed to log in:', error);\r\n    }\r\n  };\r\n\r\n  const handleRegister = async () => {\r\n    try {\r\n      const initialGameState = {\r\n        currency: 0,\r\n        buildings: {},\r\n        achievements: {\r\n          gain_100_currency: false,\r\n          click_100_times: false,\r\n        },\r\n        last_active: new Date().toISOString(),\r\n      };\r\n\r\n      const response = await fetch('http://localhost:5000/api/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password, gameState: initialGameState }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('Registration successful');\r\n        console.log('Registration successful');\r\n        setIsRegistered(true);\r\n      } else if (response.status === 409) {\r\n        alert('Email already exists. Please choose a different email.');\r\n      } else {\r\n        alert('Registration failed. Please try again.');\r\n        console.error('Registration failed');\r\n      }\r\n    } catch (error) {\r\n      alert('Failed to register. Please try again later.');\r\n      console.error('Failed to register:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>{isRegistered ? \"Login\" : \"Register\"}</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Email\"\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n      <button onClick={isRegistered ? handleLogin : handleRegister}>\r\n        {isRegistered ? \"Login\" : \"Register\"}\r\n      </button>\r\n      <button onClick={() => setIsRegistered(!isRegistered)}>\r\n        {isRegistered ? \"Need to register?\" : \"Already have an account?\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}