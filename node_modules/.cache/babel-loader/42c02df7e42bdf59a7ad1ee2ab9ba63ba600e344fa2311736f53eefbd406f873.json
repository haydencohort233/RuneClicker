{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\enemy\\\\enemy.js\",\n  _s = $RefreshSig$();\n// /components/enemy/enemy.js\nimport React, { useEffect, useState } from 'react';\nimport worldLocations from '../worldmap/worldLocations.json';\nimport enemyConfig from './enemyConfig.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Enemy = ({\n  locationId\n}) => {\n  _s();\n  const [enemies, setEnemies] = useState([]);\n  useEffect(() => {\n    if (locationId) {\n      spawnEnemies(locationId);\n    }\n  }, [locationId]);\n  const spawnEnemies = locationId => {\n    const location = worldLocations.find(loc => loc.id === locationId);\n    if (!location) return;\n    const {\n      enemies: enemyTypes,\n      amount\n    } = location;\n    let spawnedEnemies = [];\n    const enemyCount = Math.floor(Math.random() * amount) + 1; // Random count between 1 and max amount\n\n    for (let i = 0; i < enemyCount; i++) {\n      const randomEnemyType = enemyTypes[Math.floor(Math.random() * enemyTypes.length)];\n      let enemy = {\n        type: randomEnemyType,\n        ...enemyConfig[randomEnemyType]\n      };\n\n      // Randomly assign modifiers (e.g., Legendary)\n      if (Math.random() < 0.1) {\n        // 10% chance to be legendary\n        enemy = {\n          ...enemy,\n          type: `Legendary ${enemy.type}`,\n          hp: enemy.hp * 10,\n          damage: enemy.damage * 2,\n          specialTag: 'Legendary'\n        };\n      }\n      spawnedEnemies.push(enemy);\n    }\n    setEnemies(spawnedEnemies);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"enemy-container\",\n    children: enemies.map((enemy, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"enemy\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: enemy.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"HP: \", enemy.hp]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Damage: \", enemy.damage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), enemy.specialTag && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"special-tag\",\n        children: enemy.specialTag\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 42\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(Enemy, \"O80PhzVSF/eAooV4KU5e4YcvI/A=\");\n_c = Enemy;\nexport default Enemy;\nvar _c;\n$RefreshReg$(_c, \"Enemy\");","map":{"version":3,"names":["React","useEffect","useState","worldLocations","enemyConfig","jsxDEV","_jsxDEV","Enemy","locationId","_s","enemies","setEnemies","spawnEnemies","location","find","loc","id","enemyTypes","amount","spawnedEnemies","enemyCount","Math","floor","random","i","randomEnemyType","length","enemy","type","hp","damage","specialTag","push","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/enemy/enemy.js"],"sourcesContent":["// /components/enemy/enemy.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport worldLocations from '../worldmap/worldLocations.json';\r\nimport enemyConfig from './enemyConfig.json';\r\n\r\nconst Enemy = ({ locationId }) => {\r\n    const [enemies, setEnemies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (locationId) {\r\n            spawnEnemies(locationId);\r\n        }\r\n    }, [locationId]);\r\n\r\n    const spawnEnemies = (locationId) => {\r\n        const location = worldLocations.find(loc => loc.id === locationId);\r\n        if (!location) return;\r\n\r\n        const { enemies: enemyTypes, amount } = location;\r\n        let spawnedEnemies = [];\r\n        const enemyCount = Math.floor(Math.random() * amount) + 1; // Random count between 1 and max amount\r\n\r\n        for (let i = 0; i < enemyCount; i++) {\r\n            const randomEnemyType = enemyTypes[Math.floor(Math.random() * enemyTypes.length)];\r\n            let enemy = { type: randomEnemyType, ...enemyConfig[randomEnemyType] };\r\n\r\n            // Randomly assign modifiers (e.g., Legendary)\r\n            if (Math.random() < 0.1) { // 10% chance to be legendary\r\n                enemy = {\r\n                    ...enemy,\r\n                    type: `Legendary ${enemy.type}`,\r\n                    hp: enemy.hp * 10,\r\n                    damage: enemy.damage * 2,\r\n                    specialTag: 'Legendary'\r\n                };\r\n            }\r\n\r\n            spawnedEnemies.push(enemy);\r\n        }\r\n\r\n        setEnemies(spawnedEnemies);\r\n    };\r\n\r\n    return (\r\n        <div className=\"enemy-container\">\r\n            {enemies.map((enemy, index) => (\r\n                <div key={index} className=\"enemy\">\r\n                    <h3>{enemy.type}</h3>\r\n                    <p>HP: {enemy.hp}</p>\r\n                    <p>Damage: {enemy.damage}</p>\r\n                    {enemy.specialTag && <p className=\"special-tag\">{enemy.specialTag}</p>}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Enemy;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,WAAW,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACZ,IAAIO,UAAU,EAAE;MACZI,YAAY,CAACJ,UAAU,CAAC;IAC5B;EACJ,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMI,YAAY,GAAIJ,UAAU,IAAK;IACjC,MAAMK,QAAQ,GAAGV,cAAc,CAACW,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKR,UAAU,CAAC;IAClE,IAAI,CAACK,QAAQ,EAAE;IAEf,MAAM;MAAEH,OAAO,EAAEO,UAAU;MAAEC;IAAO,CAAC,GAAGL,QAAQ;IAChD,IAAIM,cAAc,GAAG,EAAE;IACvB,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;;IAE3D,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,EAAEI,CAAC,EAAE,EAAE;MACjC,MAAMC,eAAe,GAAGR,UAAU,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,UAAU,CAACS,MAAM,CAAC,CAAC;MACjF,IAAIC,KAAK,GAAG;QAAEC,IAAI,EAAEH,eAAe;QAAE,GAAGrB,WAAW,CAACqB,eAAe;MAAE,CAAC;;MAEtE;MACA,IAAIJ,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;QAAE;QACvBI,KAAK,GAAG;UACJ,GAAGA,KAAK;UACRC,IAAI,EAAE,aAAaD,KAAK,CAACC,IAAI,EAAE;UAC/BC,EAAE,EAAEF,KAAK,CAACE,EAAE,GAAG,EAAE;UACjBC,MAAM,EAAEH,KAAK,CAACG,MAAM,GAAG,CAAC;UACxBC,UAAU,EAAE;QAChB,CAAC;MACL;MAEAZ,cAAc,CAACa,IAAI,CAACL,KAAK,CAAC;IAC9B;IAEAhB,UAAU,CAACQ,cAAc,CAAC;EAC9B,CAAC;EAED,oBACIb,OAAA;IAAK2B,SAAS,EAAC,iBAAiB;IAAAC,QAAA,EAC3BxB,OAAO,CAACyB,GAAG,CAAC,CAACR,KAAK,EAAES,KAAK,kBACtB9B,OAAA;MAAiB2B,SAAS,EAAC,OAAO;MAAAC,QAAA,gBAC9B5B,OAAA;QAAA4B,QAAA,EAAKP,KAAK,CAACC;MAAI;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBlC,OAAA;QAAA4B,QAAA,GAAG,MAAI,EAACP,KAAK,CAACE,EAAE;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBlC,OAAA;QAAA4B,QAAA,GAAG,UAAQ,EAACP,KAAK,CAACG,MAAM;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC5Bb,KAAK,CAACI,UAAU,iBAAIzB,OAAA;QAAG2B,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAEP,KAAK,CAACI;MAAU;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAJhEJ,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKV,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC/B,EAAA,CAlDIF,KAAK;AAAAkC,EAAA,GAALlC,KAAK;AAoDX,eAAeA,KAAK;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}