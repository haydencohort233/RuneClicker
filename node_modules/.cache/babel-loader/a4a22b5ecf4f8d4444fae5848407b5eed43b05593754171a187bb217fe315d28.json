{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\users\\\\Login.js\",\n  _s = $RefreshSig$();\n// /src/components/users/Login.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login({\n  setUserId\n}) {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isRegistered, setIsRegistered] = useState(true); // Toggle between login and register\n\n  const handleLogin = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUserId(data.userId);\n        alert('Login successful');\n        console.log('Login successful');\n      } else {\n        alert('Login failed: Invalid credentials');\n        console.error('Login failed');\n      }\n    } catch (error) {\n      alert('Failed to log in. Please try again later.');\n      console.error('Failed to log in:', error);\n    }\n  };\n  const handleRegister = async () => {\n    try {\n      const initialGameState = {\n        currency: 0,\n        buildings: {},\n        achievements: {},\n        last_active: new Date().toISOString()\n      };\n\n      // Initialize achievements with false values\n      const responseAchievementList = await fetch('/achievements-list.json');\n      const achievementData = await responseAchievementList.json();\n      achievementData.achievements.forEach(achievement => {\n        initialGameState.achievements[achievement.id] = false;\n      });\n      const response = await fetch('http://localhost:5000/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password,\n          gameState: initialGameState\n        })\n      });\n      if (response.ok) {\n        alert('Registration successful');\n        console.log('Registration successful');\n        setIsRegistered(true);\n      } else if (response.status === 409) {\n        alert('Username already exists. Please choose a different username.');\n      } else {\n        alert('Registration failed. Please try again.');\n        console.error('Registration failed');\n      }\n    } catch (error) {\n      alert('Failed to register. Please try again later.');\n      console.error('Failed to register:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isRegistered ? \"Login\" : \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isRegistered ? handleLogin : handleRegister,\n      children: isRegistered ? \"Login\" : \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsRegistered(!isRegistered),\n      children: isRegistered ? \"Need to register?\" : \"Already have an account?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"QXkNDf85FmOWieb+FuMcgfNeZPE=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Login","setUserId","_s","username","setUsername","password","setPassword","isRegistered","setIsRegistered","handleLogin","response","fetch","method","headers","body","JSON","stringify","ok","data","json","userId","alert","console","log","error","handleRegister","initialGameState","currency","buildings","achievements","last_active","Date","toISOString","responseAchievementList","achievementData","forEach","achievement","id","gameState","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/users/Login.js"],"sourcesContent":["// /src/components/users/Login.js\r\nimport React, { useState } from 'react';\r\n\r\nfunction Login({ setUserId }) {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isRegistered, setIsRegistered] = useState(true); // Toggle between login and register\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setUserId(data.userId);\r\n        alert('Login successful');\r\n        console.log('Login successful');\r\n      } else {\r\n        alert('Login failed: Invalid credentials');\r\n        console.error('Login failed');\r\n      }\r\n    } catch (error) {\r\n      alert('Failed to log in. Please try again later.');\r\n      console.error('Failed to log in:', error);\r\n    }\r\n  };\r\n\r\n  const handleRegister = async () => {\r\n    try {\r\n      const initialGameState = {\r\n        currency: 0,\r\n        buildings: {},\r\n        achievements: {},\r\n        last_active: new Date().toISOString(),\r\n      };\r\n\r\n      // Initialize achievements with false values\r\n      const responseAchievementList = await fetch('/achievements-list.json');\r\n      const achievementData = await responseAchievementList.json();\r\n      achievementData.achievements.forEach((achievement) => {\r\n        initialGameState.achievements[achievement.id] = false;\r\n      });\r\n\r\n      const response = await fetch('http://localhost:5000/api/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password, gameState: initialGameState }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('Registration successful');\r\n        console.log('Registration successful');\r\n        setIsRegistered(true);\r\n      } else if (response.status === 409) {\r\n        alert('Username already exists. Please choose a different username.');\r\n      } else {\r\n        alert('Registration failed. Please try again.');\r\n        console.error('Registration failed');\r\n      }\r\n    } catch (error) {\r\n      alert('Failed to register. Please try again later.');\r\n      console.error('Failed to register:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>{isRegistered ? \"Login\" : \"Register\"}</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Username\"\r\n        value={username}\r\n        onChange={(e) => setUsername(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n      <button onClick={isRegistered ? handleLogin : handleRegister}>\r\n        {isRegistered ? \"Login\" : \"Register\"}\r\n      </button>\r\n      <button onClick={() => setIsRegistered(!isRegistered)}>\r\n        {isRegistered ? \"Need to register?\" : \"Already have an account?\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}