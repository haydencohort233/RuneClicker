{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\currency\\\\currency.js\",\n  _s = $RefreshSig$();\n// Inside your currency.js component\n\nimport React, { useState, useEffect } from 'react';\nimport buildingStats from '../buildings/building-stats.json';\nimport styles from './currency.module.css';\nimport currencyLevels from './currencyLevels.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Currency({\n  gameState,\n  setGameState = () => {}\n}) {\n  _s();\n  const [currency, setCurrency] = useState(0);\n  const [totalIncome, setTotalIncome] = useState(0);\n  const [currencyText, setCurrencyText] = useState('');\n\n  // Load currency from gameState when component mounts\n  useEffect(() => {\n    if (gameState && gameState.currency !== undefined) {\n      setCurrency(gameState.currency);\n    }\n  }, [gameState.currency]);\n\n  // Calculate total income whenever buildings change\n  useEffect(() => {\n    if (gameState && gameState.buildings) {\n      let income = 0;\n      for (const [buildingName, {\n        count\n      }] of Object.entries(gameState.buildings)) {\n        if (count > 0 && buildingStats[buildingName]) {\n          const buildingIncome = buildingStats[buildingName].income;\n          income += buildingIncome * count;\n        }\n      }\n      setTotalIncome(income);\n    }\n  }, [gameState.buildings]);\n\n  // Update gameState whenever currency changes\n  useEffect(() => {\n    if (typeof setGameState === 'function') {\n      setGameState(prevState => ({\n        ...prevState,\n        currency: currency\n      }));\n    }\n    // Update currency text and image when currency changes\n    for (const level of currencyLevels.currencyLevels) {\n      if (currency >= level.min) {\n        setCurrencyText(level.text);\n      }\n    }\n  }, [currency, setGameState]);\n\n  // Function to increment currency and track clicks\n  const incrementCurrency = () => {\n    setCurrency(prevCurrency => prevCurrency + 1);\n    setGameState(prevState => ({\n      ...prevState,\n      clicks: (prevState.clicks || 0) + 1 // Increment clicks count\n    }));\n  };\n\n  // Function to clear currency\n  const clearCurrency = () => {\n    console.log('Clearing currency for testing purposes');\n    setCurrency(0);\n  };\n\n  // Determine which currency image to display based on the amount of currency\n  const getCurrencyImage = () => {\n    let selectedImage = currencyLevels.currencyLevels[0].image;\n    for (const level of currencyLevels.currencyLevels) {\n      if (currency >= level.min) {\n        selectedImage = require(`../../assets/images/currency/${level.image}`);\n      }\n    }\n    return selectedImage;\n  };\n\n  // Format currency with commas\n  const formatCurrency = value => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.currencyContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: getCurrencyImage(),\n      alt: \"Currency Icon\",\n      className: styles.currencyIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.currencyDetails,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: currency >= currencyLevels.highCurrencyThreshold ? styles.currencyAmountHigh : '',\n        children: [\"Currency: \", formatCurrency(currency), \" (\", currencyText, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Income: \", formatCurrency(totalIncome), \"/gold sec\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.currencyButtonContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementCurrency,\n        className: styles.currencyButton,\n        children: \"Earn Currency\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCurrency,\n        className: `${styles.currencyButton} ${styles.clearButton}`,\n        children: \"Clear Currency [Dev]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(Currency, \"n6qoiWqR/H9XfazkssizjRs2LiI=\");\n_c = Currency;\nexport default Currency;\nvar _c;\n$RefreshReg$(_c, \"Currency\");","map":{"version":3,"names":["React","useState","useEffect","buildingStats","styles","currencyLevels","jsxDEV","_jsxDEV","Currency","gameState","setGameState","_s","currency","setCurrency","totalIncome","setTotalIncome","currencyText","setCurrencyText","undefined","buildings","income","buildingName","count","Object","entries","buildingIncome","prevState","level","min","text","incrementCurrency","prevCurrency","clicks","clearCurrency","console","log","getCurrencyImage","selectedImage","image","require","formatCurrency","value","toString","replace","className","currencyContainer","children","src","alt","currencyIcon","fileName","_jsxFileName","lineNumber","columnNumber","currencyDetails","highCurrencyThreshold","currencyAmountHigh","currencyButtonContainer","onClick","currencyButton","clearButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/currency/currency.js"],"sourcesContent":["// Inside your currency.js component\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport buildingStats from '../buildings/building-stats.json';\r\nimport styles from './currency.module.css';\r\nimport currencyLevels from './currencyLevels.json';\r\n\r\nfunction Currency({ gameState, setGameState = () => {} }) {\r\n  const [currency, setCurrency] = useState(0);\r\n  const [totalIncome, setTotalIncome] = useState(0);\r\n  const [currencyText, setCurrencyText] = useState('');\r\n\r\n  // Load currency from gameState when component mounts\r\n  useEffect(() => {\r\n    if (gameState && gameState.currency !== undefined) {\r\n      setCurrency(gameState.currency);\r\n    }\r\n  }, [gameState.currency]);\r\n\r\n  // Calculate total income whenever buildings change\r\n  useEffect(() => {\r\n    if (gameState && gameState.buildings) {\r\n      let income = 0;\r\n      for (const [buildingName, { count }] of Object.entries(gameState.buildings)) {\r\n        if (count > 0 && buildingStats[buildingName]) {\r\n          const buildingIncome = buildingStats[buildingName].income;\r\n          income += buildingIncome * count;\r\n        }\r\n      }\r\n      setTotalIncome(income);\r\n    }\r\n  }, [gameState.buildings]);\r\n\r\n  // Update gameState whenever currency changes\r\n  useEffect(() => {\r\n    if (typeof setGameState === 'function') {\r\n      setGameState(prevState => ({\r\n        ...prevState,\r\n        currency: currency\r\n      }));\r\n    }\r\n    // Update currency text and image when currency changes\r\n    for (const level of currencyLevels.currencyLevels) {\r\n      if (currency >= level.min) {\r\n        setCurrencyText(level.text);\r\n      }\r\n    }\r\n  }, [currency, setGameState]);\r\n\r\n// Function to increment currency and track clicks\r\nconst incrementCurrency = () => {\r\n    setCurrency((prevCurrency) => prevCurrency + 1);\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      clicks: (prevState.clicks || 0) + 1, // Increment clicks count\r\n    }));\r\n  };  \r\n\r\n  // Function to clear currency\r\n  const clearCurrency = () => {\r\n    console.log('Clearing currency for testing purposes');\r\n    setCurrency(0);\r\n  };\r\n\r\n  // Determine which currency image to display based on the amount of currency\r\n  const getCurrencyImage = () => {\r\n    let selectedImage = currencyLevels.currencyLevels[0].image;\r\n    for (const level of currencyLevels.currencyLevels) {\r\n      if (currency >= level.min) {\r\n        selectedImage = require(`../../assets/images/currency/${level.image}`);\r\n      }\r\n    }\r\n    return selectedImage;\r\n  };\r\n\r\n  // Format currency with commas\r\n  const formatCurrency = (value) => {\r\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  };\r\n\r\n  return (\r\n    <div className={styles.currencyContainer}>\r\n      <img src={getCurrencyImage()} alt=\"Currency Icon\" className={styles.currencyIcon} />\r\n      <div className={styles.currencyDetails}>\r\n        <h3 className={currency >= currencyLevels.highCurrencyThreshold ? styles.currencyAmountHigh : ''}>\r\n          Currency: {formatCurrency(currency)} ({currencyText})\r\n        </h3>\r\n        <h4>Income: {formatCurrency(totalIncome)}/gold sec</h4>\r\n      </div>\r\n      <div className={styles.currencyButtonContainer}>\r\n        <button onClick={incrementCurrency} className={styles.currencyButton}>Earn Currency</button>\r\n        <button onClick={clearCurrency} className={`${styles.currencyButton} ${styles.clearButton}`}>Clear Currency [Dev]</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Currency;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}