{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\buildings\\\\buildings.js\",\n  _s = $RefreshSig$();\n// /src/components/buildings/buildings.js\nimport React, { useState, useEffect } from 'react';\nimport buildingStats from './building-stats.json';\nimport styles from './buildings.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Buildings({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [buildings, setBuildings] = useState(() => {\n    // Initialize all buildings with a count of 0\n    const initialBuildings = {};\n    for (const buildingName in buildingStats) {\n      if (buildingStats.hasOwnProperty(buildingName)) {\n        initialBuildings[buildingName] = {\n          count: 0,\n          cost: buildingStats[buildingName].cost\n        };\n      }\n    }\n    return initialBuildings;\n  });\n  useEffect(() => {\n    // Load existing buildings from gameState if available\n    if (gameState && gameState.buildings) {\n      setBuildings(gameState.buildings);\n    }\n  }, [gameState]);\n  useEffect(() => {\n    // Generate income based on building stats\n    const incomeIntervals = Object.entries(buildings).map(([buildingName, {\n      count\n    }]) => {\n      if (count > 0 && buildingStats[buildingName]) {\n        const interval = setInterval(() => {\n          setGameState(prevState => ({\n            ...prevState,\n            currency: prevState.currency + count * buildingStats[buildingName].income\n          }));\n        }, buildingStats[buildingName].incomeInterval);\n        return interval;\n      }\n      return null;\n    });\n\n    // Clear intervals when component unmounts or buildings change\n    return () => {\n      incomeIntervals.forEach(interval => {\n        if (interval) clearInterval(interval);\n      });\n    };\n  }, [buildings, setGameState]);\n\n  // Add a new building or increase count if it exists\n  const addBuilding = buildingName => {\n    var _buildings$buildingNa, _buildings$buildingNa2, _buildingStats$buildi;\n    const currentCount = ((_buildings$buildingNa = buildings[buildingName]) === null || _buildings$buildingNa === void 0 ? void 0 : _buildings$buildingNa.count) || 0;\n    const currentCost = ((_buildings$buildingNa2 = buildings[buildingName]) === null || _buildings$buildingNa2 === void 0 ? void 0 : _buildings$buildingNa2.cost) || buildingStats[buildingName].cost;\n    const costIncreaseModifier = ((_buildingStats$buildi = buildingStats[buildingName]) === null || _buildingStats$buildi === void 0 ? void 0 : _buildingStats$buildi.costIncreaseModifier) || 1.15;\n    const newCost = Math.round(currentCost * costIncreaseModifier); // Increase cost based on modifier from building-stats.json\n\n    // Check if user has enough currency to buy the building\n    if (gameState.currency < currentCost) {\n      alert('Not enough currency to buy this building!');\n      return;\n    }\n    const newBuildings = {\n      ...buildings,\n      [buildingName]: {\n        count: currentCount + 1,\n        cost: newCost\n      }\n    };\n    setBuildings(newBuildings);\n\n    // Update gameState with new buildings object and deduct cost\n    setGameState(prevState => ({\n      ...prevState,\n      currency: prevState.currency - currentCost,\n      buildings: newBuildings\n    }));\n  };\n\n  // Clear all buildings for development testing\n  const clearAllBuildings = () => {\n    console.log('Clearing all buildings for testing purposes');\n    const clearedBuildings = {};\n    for (const buildingName in buildingStats) {\n      if (buildingStats.hasOwnProperty(buildingName)) {\n        clearedBuildings[buildingName] = {\n          count: 0,\n          cost: buildingStats[buildingName].cost\n        };\n      }\n    }\n    setBuildings(clearedBuildings);\n    setGameState(prevState => ({\n      ...prevState,\n      buildings: clearedBuildings\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.buildings,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Buildings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buildingList,\n      children: Object.entries(buildings).map(([building, {\n        count,\n        cost\n      }]) => {\n        var _buildingStats$buildi2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buildingItem,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: require(`../../assets/images/buildings/building_${building.toLowerCase().replace(/ /g, '_')}.png`),\n            alt: building,\n            className: styles.buildingThumbnail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buildingTitle,\n            children: building\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buildingDetails,\n            children: [\"Count: \", count, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 30\n            }, this), \"Income: \", ((_buildingStats$buildi2 = buildingStats[building]) === null || _buildingStats$buildi2 === void 0 ? void 0 : _buildingStats$buildi2.income) || 0, \" per interval \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 75\n            }, this), \"Next Cost: \", cost]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => addBuilding(building),\n            className: styles.buildingButton,\n            children: [\"Buy \", building]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, building, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearAllBuildings,\n      className: `${styles.buildingButton} ${styles.devButton}`,\n      children: \"Clear All Buildings (Dev Button)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(Buildings, \"d/dssbYkqCXgZvO49zS/VSN9XMk=\");\n_c = Buildings;\nexport default Buildings;\nvar _c;\n$RefreshReg$(_c, \"Buildings\");","map":{"version":3,"names":["React","useState","useEffect","buildingStats","styles","jsxDEV","_jsxDEV","Buildings","gameState","setGameState","_s","buildings","setBuildings","initialBuildings","buildingName","hasOwnProperty","count","cost","incomeIntervals","Object","entries","map","interval","setInterval","prevState","currency","income","incomeInterval","forEach","clearInterval","addBuilding","_buildings$buildingNa","_buildings$buildingNa2","_buildingStats$buildi","currentCount","currentCost","costIncreaseModifier","newCost","Math","round","alert","newBuildings","clearAllBuildings","console","log","clearedBuildings","className","children","fileName","_jsxFileName","lineNumber","columnNumber","buildingList","building","_buildingStats$buildi2","buildingItem","src","require","toLowerCase","replace","alt","buildingThumbnail","buildingTitle","buildingDetails","onClick","buildingButton","devButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/buildings/buildings.js"],"sourcesContent":["// /src/components/buildings/buildings.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport buildingStats from './building-stats.json';\r\nimport styles from './buildings.module.css';\r\n\r\nfunction Buildings({ gameState, setGameState }) {\r\n  const [buildings, setBuildings] = useState(() => {\r\n    // Initialize all buildings with a count of 0\r\n    const initialBuildings = {};\r\n    for (const buildingName in buildingStats) {\r\n      if (buildingStats.hasOwnProperty(buildingName)) {\r\n        initialBuildings[buildingName] = {\r\n          count: 0,\r\n          cost: buildingStats[buildingName].cost,\r\n        };\r\n      }\r\n    }\r\n    return initialBuildings;\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Load existing buildings from gameState if available\r\n    if (gameState && gameState.buildings) {\r\n      setBuildings(gameState.buildings);\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    // Generate income based on building stats\r\n    const incomeIntervals = Object.entries(buildings).map(([buildingName, { count }]) => {\r\n      if (count > 0 && buildingStats[buildingName]) {\r\n        const interval = setInterval(() => {\r\n          setGameState((prevState) => ({\r\n            ...prevState,\r\n            currency: prevState.currency + count * buildingStats[buildingName].income,\r\n          }));\r\n        }, buildingStats[buildingName].incomeInterval);\r\n        return interval;\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // Clear intervals when component unmounts or buildings change\r\n    return () => {\r\n      incomeIntervals.forEach((interval) => {\r\n        if (interval) clearInterval(interval);\r\n      });\r\n    };\r\n  }, [buildings, setGameState]);\r\n\r\n  // Add a new building or increase count if it exists\r\n  const addBuilding = (buildingName) => {\r\n    const currentCount = buildings[buildingName]?.count || 0;\r\n    const currentCost = buildings[buildingName]?.cost || buildingStats[buildingName].cost;\r\n    const costIncreaseModifier = buildingStats[buildingName]?.costIncreaseModifier || 1.15;\r\n    const newCost = Math.round(currentCost * costIncreaseModifier); // Increase cost based on modifier from building-stats.json\r\n\r\n    // Check if user has enough currency to buy the building\r\n    if (gameState.currency < currentCost) {\r\n      alert('Not enough currency to buy this building!');\r\n      return;\r\n    }\r\n\r\n    const newBuildings = {\r\n      ...buildings,\r\n      [buildingName]: {\r\n        count: currentCount + 1,\r\n        cost: newCost,\r\n      },\r\n    };\r\n    setBuildings(newBuildings);\r\n\r\n    // Update gameState with new buildings object and deduct cost\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      currency: prevState.currency - currentCost,\r\n      buildings: newBuildings,\r\n    }));\r\n  };\r\n\r\n  // Clear all buildings for development testing\r\n  const clearAllBuildings = () => {\r\n    console.log('Clearing all buildings for testing purposes');\r\n    const clearedBuildings = {};\r\n    for (const buildingName in buildingStats) {\r\n      if (buildingStats.hasOwnProperty(buildingName)) {\r\n        clearedBuildings[buildingName] = {\r\n          count: 0,\r\n          cost: buildingStats[buildingName].cost,\r\n        };\r\n      }\r\n    }\r\n    setBuildings(clearedBuildings);\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      buildings: clearedBuildings,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.buildings}>\r\n      <h2>Buildings</h2>\r\n      <div className={styles.buildingList}>\r\n        {Object.entries(buildings).map(([building, { count, cost }]) => (\r\n          <div key={building} className={styles.buildingItem}>\r\n            <img \r\n              src={require(`../../assets/images/buildings/building_${building.toLowerCase().replace(/ /g, '_')}.png`)} \r\n              alt={building}\r\n              className={styles.buildingThumbnail}\r\n            />\r\n            <div className={styles.buildingTitle}>{building}</div>\r\n            <div className={styles.buildingDetails}>\r\n              Count: {count} <br />\r\n              Income: {buildingStats[building]?.income || 0} per interval <br />\r\n              Next Cost: {cost}\r\n            </div>\r\n            <button onClick={() => addBuilding(building)} className={styles.buildingButton}>Buy {building}</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={clearAllBuildings} className={`${styles.buildingButton} ${styles.devButton}`}>Clear All Buildings (Dev Button)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buildings;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}