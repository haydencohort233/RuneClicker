{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\currency\\\\currency.js\",\n  _s = $RefreshSig$();\n// /src/components/currency/currency.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport buildingStats from '../buildings/building-stats.json';\nimport styles from './currency.module.css';\nimport currencyLevels from './currencyLevels.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Currency({\n  gameState,\n  setGameState,\n  userId\n}) {\n  _s();\n  const [currency, setCurrency] = useState(0);\n  const [totalIncome, setTotalIncome] = useState(0);\n  const [currencyText, setCurrencyText] = useState('');\n  const [currencyImage, setCurrencyImage] = useState('');\n\n  // Preload images on component mount\n  useEffect(() => {\n    const preloadedImages = {};\n    currencyLevels.currencyLevels.forEach(level => {\n      preloadedImages[level.image] = require(`../../assets/images/currency/${level.image}`);\n    });\n    setCurrencyImage(preloadedImages[currencyLevels.currencyLevels[0].image]);\n  }, []);\n\n  // Load currency from backend when component mounts\n  useEffect(() => {\n    if (userId) {\n      axios.get(`http://localhost:5000/api/player/${userId}`).then(response => {\n        const playerData = response.data;\n        if (playerData && playerData.currency !== undefined) {\n          setCurrency(playerData.currency);\n          setGameState(prevState => ({\n            ...prevState,\n            currency: playerData.currency\n          }));\n        }\n      }).catch(error => {\n        console.error('Failed to fetch currency data:', error);\n      });\n    }\n  }, [userId]);\n\n  // Calculate total income whenever buildings change\n  useEffect(() => {\n    if (gameState && gameState.buildings) {\n      let income = 0;\n      for (const [buildingName, {\n        count\n      }] of Object.entries(gameState.buildings)) {\n        if (count > 0 && buildingStats[buildingName]) {\n          const buildingIncome = buildingStats[buildingName].income;\n          income += buildingIncome * count;\n        }\n      }\n      setTotalIncome(income);\n    }\n  }, [gameState.buildings]);\n\n  // Real-time currency update based on building income\n  useEffect(() => {\n    const incomeInterval = setInterval(() => {\n      if (totalIncome > 0) {\n        setCurrency(prevCurrency => {\n          const newCurrency = prevCurrency + totalIncome;\n\n          // Update gameState for live frontend update\n          setGameState(prevState => ({\n            ...prevState,\n            currency: newCurrency\n          }));\n          return newCurrency;\n        });\n      }\n    }, 1000); // Update currency every 1 second\n\n    // Clear the interval when the component unmounts\n    return () => clearInterval(incomeInterval);\n  }, [totalIncome]);\n\n  // Update backend whenever currency changes\n  useEffect(() => {\n    if (userId) {\n      axios.post(`http://localhost:5000/api/player/${userId}/update-currency`, {\n        currency\n      }).then(response => {\n        console.log(response.data.message);\n      }).catch(error => {\n        console.error('Failed to update currency in backend:', error);\n      });\n    }\n  }, [currency, userId]);\n\n  // Update currency text and image whenever currency changes\n  useEffect(() => {\n    for (const level of currencyLevels.currencyLevels) {\n      if (currency >= level.min) {\n        setCurrencyText(level.text);\n        setCurrencyImage(require(`../../assets/images/currency/${level.image}`));\n      }\n    }\n  }, [currency]);\n\n  // Function to increment currency manually and track clicks\n  const incrementCurrency = () => {\n    setCurrency(prevCurrency => {\n      const newCurrency = prevCurrency + 1;\n\n      // Update gameState\n      setGameState(prevState => ({\n        ...prevState,\n        currency: newCurrency,\n        clicks: (prevState.clicks || 0) + 1 // Increment clicks count\n      }));\n      return newCurrency;\n    });\n  };\n\n  // Function to clear currency for testing purposes\n  const clearCurrency = () => {\n    console.log('Clearing currency for testing purposes');\n    setCurrency(0);\n    setGameState(prevState => ({\n      ...prevState,\n      currency: 0\n    }));\n  };\n\n  // Format currency with commas\n  const formatCurrency = value => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.currencyContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: currencyImage,\n      alt: \"Currency Icon\",\n      className: styles.currencyIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.currencyDetails,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: currency >= currencyLevels.highCurrencyThreshold ? styles.currencyAmountHigh : '',\n        children: [\"Currency: \", formatCurrency(currency), \" (\", currencyText, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Income: \", formatCurrency(totalIncome), \"/gold sec\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.currencyButtonContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementCurrency,\n        className: styles.currencyButton,\n        children: \"Earn Currency\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCurrency,\n        className: `${styles.currencyButton} ${styles.clearButton}`,\n        children: \"Clear Currency [Dev]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n_s(Currency, \"fYY7t+lBHg+CHkIxUrxTN2eR57A=\");\n_c = Currency;\nexport default Currency;\nvar _c;\n$RefreshReg$(_c, \"Currency\");","map":{"version":3,"names":["React","useState","useEffect","axios","buildingStats","styles","currencyLevels","jsxDEV","_jsxDEV","Currency","gameState","setGameState","userId","_s","currency","setCurrency","totalIncome","setTotalIncome","currencyText","setCurrencyText","currencyImage","setCurrencyImage","preloadedImages","forEach","level","image","require","get","then","response","playerData","data","undefined","prevState","catch","error","console","buildings","income","buildingName","count","Object","entries","buildingIncome","incomeInterval","setInterval","prevCurrency","newCurrency","clearInterval","post","log","message","min","text","incrementCurrency","clicks","clearCurrency","formatCurrency","value","toString","replace","className","currencyContainer","children","src","alt","currencyIcon","fileName","_jsxFileName","lineNumber","columnNumber","currencyDetails","highCurrencyThreshold","currencyAmountHigh","currencyButtonContainer","onClick","currencyButton","clearButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/currency/currency.js"],"sourcesContent":["// /src/components/currency/currency.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport buildingStats from '../buildings/building-stats.json';\r\nimport styles from './currency.module.css';\r\nimport currencyLevels from './currencyLevels.json';\r\n\r\nfunction Currency({ gameState, setGameState, userId }) {\r\n  const [currency, setCurrency] = useState(0);\r\n  const [totalIncome, setTotalIncome] = useState(0);\r\n  const [currencyText, setCurrencyText] = useState('');\r\n  const [currencyImage, setCurrencyImage] = useState('');\r\n\r\n  // Preload images on component mount\r\n  useEffect(() => {\r\n    const preloadedImages = {};\r\n    currencyLevels.currencyLevels.forEach(level => {\r\n      preloadedImages[level.image] = require(`../../assets/images/currency/${level.image}`);\r\n    });\r\n    setCurrencyImage(preloadedImages[currencyLevels.currencyLevels[0].image]);\r\n  }, []);\r\n\r\n  // Load currency from backend when component mounts\r\n  useEffect(() => {\r\n    if (userId) {\r\n      axios.get(`http://localhost:5000/api/player/${userId}`)\r\n        .then((response) => {\r\n          const playerData = response.data;\r\n          if (playerData && playerData.currency !== undefined) {\r\n            setCurrency(playerData.currency);\r\n            setGameState((prevState) => ({\r\n              ...prevState,\r\n              currency: playerData.currency,\r\n            }));\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Failed to fetch currency data:', error);\r\n        });\r\n    }\r\n  }, [userId]);\r\n\r\n  // Calculate total income whenever buildings change\r\n  useEffect(() => {\r\n    if (gameState && gameState.buildings) {\r\n      let income = 0;\r\n      for (const [buildingName, { count }] of Object.entries(gameState.buildings)) {\r\n        if (count > 0 && buildingStats[buildingName]) {\r\n          const buildingIncome = buildingStats[buildingName].income;\r\n          income += buildingIncome * count;\r\n        }\r\n      }\r\n      setTotalIncome(income);\r\n    }\r\n  }, [gameState.buildings]);\r\n\r\n  // Real-time currency update based on building income\r\n  useEffect(() => {\r\n    const incomeInterval = setInterval(() => {\r\n      if (totalIncome > 0) {\r\n        setCurrency((prevCurrency) => {\r\n          const newCurrency = prevCurrency + totalIncome;\r\n\r\n          // Update gameState for live frontend update\r\n          setGameState((prevState) => ({\r\n            ...prevState,\r\n            currency: newCurrency,\r\n          }));\r\n\r\n          return newCurrency;\r\n        });\r\n      }\r\n    }, 1000); // Update currency every 1 second\r\n\r\n    // Clear the interval when the component unmounts\r\n    return () => clearInterval(incomeInterval);\r\n  }, [totalIncome]);\r\n\r\n  // Update backend whenever currency changes\r\n  useEffect(() => {\r\n    if (userId) {\r\n      axios.post(`http://localhost:5000/api/player/${userId}/update-currency`, { currency })\r\n        .then((response) => {\r\n          console.log(response.data.message);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Failed to update currency in backend:', error);\r\n        });\r\n    }\r\n  }, [currency, userId]);\r\n\r\n  // Update currency text and image whenever currency changes\r\n  useEffect(() => {\r\n    for (const level of currencyLevels.currencyLevels) {\r\n      if (currency >= level.min) {\r\n        setCurrencyText(level.text);\r\n        setCurrencyImage(require(`../../assets/images/currency/${level.image}`));\r\n      }\r\n    }\r\n  }, [currency]);\r\n\r\n  // Function to increment currency manually and track clicks\r\n  const incrementCurrency = () => {\r\n    setCurrency((prevCurrency) => {\r\n      const newCurrency = prevCurrency + 1;\r\n\r\n      // Update gameState\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        currency: newCurrency,\r\n        clicks: (prevState.clicks || 0) + 1, // Increment clicks count\r\n      }));\r\n\r\n      return newCurrency;\r\n    });\r\n  };\r\n\r\n  // Function to clear currency for testing purposes\r\n  const clearCurrency = () => {\r\n    console.log('Clearing currency for testing purposes');\r\n    setCurrency(0);\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      currency: 0,\r\n    }));\r\n  };\r\n\r\n  // Format currency with commas\r\n  const formatCurrency = (value) => {\r\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  };\r\n\r\n  return (\r\n    <div className={styles.currencyContainer}>\r\n      <img src={currencyImage} alt=\"Currency Icon\" className={styles.currencyIcon} />\r\n      <div className={styles.currencyDetails}>\r\n        <h3 className={currency >= currencyLevels.highCurrencyThreshold ? styles.currencyAmountHigh : ''}>\r\n          Currency: {formatCurrency(currency)} ({currencyText})\r\n        </h3>\r\n        <h4>Income: {formatCurrency(totalIncome)}/gold sec</h4>\r\n      </div>\r\n      <div className={styles.currencyButtonContainer}>\r\n        <button onClick={incrementCurrency} className={styles.currencyButton}>Earn Currency</button>\r\n        <button onClick={clearCurrency} className={`${styles.currencyButton} ${styles.clearButton}`}>Clear Currency [Dev]</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Currency;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}