{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\worldmap\\\\worldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './worldMap.module.css';\nimport worldLocations from './worldLocations.json';\nimport mapIcon from '../../assets/images/icons/map.png';\nimport worldMapImage from '../../assets/images/worldmap/worldmap.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WorldMap({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [isMapOpen, setIsMapOpen] = useState(false);\n  const [hoveredLocation, setHoveredLocation] = useState(null);\n  const [travelTimer, setTravelTimer] = useState(null);\n  useEffect(() => {\n    console.log(\"WorldMap Mounted\");\n    console.log(\"Initial Game State: \", gameState);\n  }, []);\n\n  // Toggle map visibility\n  const toggleMap = () => {\n    setIsMapOpen(prev => !prev);\n    console.log(\"Map toggled. Is map open: \", !isMapOpen);\n  };\n\n  // Handle traveling to a specific location\n  const travelToLocation = location => {\n    // Prevent traveling to the current location\n    if (gameState.currentLocation === location.id) {\n      console.log(\"You are already at this location.\");\n      return;\n    }\n    console.log(`Begin traveling to ${location.name}`);\n\n    // Set travel state in gameState\n    setGameState(prevState => {\n      const newGameState = {\n        ...prevState,\n        travel: {\n          currentLocation: prevState.currentLocation,\n          destination: location.name,\n          timeRemaining: location.travelTime,\n          isTraveling: true\n        }\n      };\n      console.log(\"Updated Game State (Start Travel): \", newGameState);\n      return newGameState;\n    });\n    setIsMapOpen(false); // Close the map after choosing a destination\n\n    // Start the travel timer\n    if (travelTimer) {\n      clearInterval(travelTimer);\n    }\n    const timer = setInterval(() => {\n      setGameState(prevState => {\n        if (prevState.travel.timeRemaining > 1) {\n          const updatedGameState = {\n            ...prevState,\n            travel: {\n              ...prevState.travel,\n              timeRemaining: prevState.travel.timeRemaining - 1\n            }\n          };\n          console.log(\"Updated Game State (During Travel): \", updatedGameState);\n          return updatedGameState;\n        } else {\n          clearInterval(timer);\n          setTravelTimer(null); // Clear the travel timer state\n          // Update gameState once travel is complete\n          const completedGameState = {\n            ...prevState,\n            currentLocation: location.id,\n            travel: {\n              currentLocation: location.id,\n              destination: '',\n              timeRemaining: 0,\n              isTraveling: false\n            }\n          };\n          console.log(\"Updated Game State (Travel Complete): \", completedGameState);\n          return completedGameState;\n        }\n      });\n    }, 1000);\n    setTravelTimer(timer);\n  };\n\n  // Handle mouse hover over a location\n  const handleMouseEnter = location => {\n    setHoveredLocation(location);\n    console.log(`Hovered over location: ${location.name}`);\n  };\n  const handleMouseLeave = () => {\n    console.log(\"Mouse left location: \", hoveredLocation ? hoveredLocation.name : \"None\");\n    setHoveredLocation(null);\n  };\n  useEffect(() => {\n    console.log(\"Updated Game State (Current Location): \", gameState.currentLocation);\n  }, [gameState.currentLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.worldMapContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleMap,\n      className: styles.mapButton,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: mapIcon,\n        alt: \"Map\",\n        className: styles.mapIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.currentLocation,\n      children: [\"Currently at: \", gameState.currentLocation]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), isMapOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.mapModal,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: worldMapImage,\n        alt: \"World Map\",\n        className: styles.mapImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.locationsContainer,\n        children: worldLocations.map(location => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.locationMarker,\n            style: {\n              top: location.coordinates.top,\n              left: location.coordinates.left\n            },\n            onClick: () => travelToLocation(location),\n            onMouseEnter: () => handleMouseEnter(location),\n            onMouseLeave: handleMouseLeave\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this), hoveredLocation && hoveredLocation.id === location.id && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.locationNameTooltip,\n            style: {\n              top: `calc(${location.coordinates.top} - 20px)`,\n              left: location.coordinates.left\n            },\n            children: location.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 19\n          }, this)]\n        }, location.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMap,\n        className: styles.closeButton,\n        children: \"Close Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(WorldMap, \"+PA4mqttUKb6Fun+b4GaE+ijJY8=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useState","useEffect","styles","worldLocations","mapIcon","worldMapImage","jsxDEV","_jsxDEV","WorldMap","gameState","setGameState","_s","isMapOpen","setIsMapOpen","hoveredLocation","setHoveredLocation","travelTimer","setTravelTimer","console","log","toggleMap","prev","travelToLocation","location","currentLocation","id","name","prevState","newGameState","travel","destination","timeRemaining","travelTime","isTraveling","clearInterval","timer","setInterval","updatedGameState","completedGameState","handleMouseEnter","handleMouseLeave","className","worldMapContainer","children","onClick","mapButton","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","mapModal","mapImage","locationsContainer","map","locationMarker","style","top","coordinates","left","onMouseEnter","onMouseLeave","locationNameTooltip","closeButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/worldmap/worldMap.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styles from './worldMap.module.css';\r\nimport worldLocations from './worldLocations.json';\r\nimport mapIcon from '../../assets/images/icons/map.png';\r\nimport worldMapImage from '../../assets/images/worldmap/worldmap.png';\r\n\r\nfunction WorldMap({ gameState, setGameState }) {\r\n  const [isMapOpen, setIsMapOpen] = useState(false);\r\n  const [hoveredLocation, setHoveredLocation] = useState(null);\r\n  const [travelTimer, setTravelTimer] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(\"WorldMap Mounted\");\r\n    console.log(\"Initial Game State: \", gameState);\r\n  }, []);\r\n\r\n  // Toggle map visibility\r\n  const toggleMap = () => {\r\n    setIsMapOpen((prev) => !prev);\r\n    console.log(\"Map toggled. Is map open: \", !isMapOpen);\r\n  };\r\n\r\n  // Handle traveling to a specific location\r\n  const travelToLocation = (location) => {\r\n    // Prevent traveling to the current location\r\n    if (gameState.currentLocation === location.id) {\r\n      console.log(\"You are already at this location.\");\r\n      return;\r\n    }\r\n\r\n    console.log(`Begin traveling to ${location.name}`);\r\n\r\n    // Set travel state in gameState\r\n    setGameState((prevState) => {\r\n      const newGameState = {\r\n        ...prevState,\r\n        travel: {\r\n          currentLocation: prevState.currentLocation,\r\n          destination: location.name,\r\n          timeRemaining: location.travelTime,\r\n          isTraveling: true,\r\n        },\r\n      };\r\n      console.log(\"Updated Game State (Start Travel): \", newGameState);\r\n      return newGameState;\r\n    });\r\n    setIsMapOpen(false); // Close the map after choosing a destination\r\n\r\n    // Start the travel timer\r\n    if (travelTimer) {\r\n      clearInterval(travelTimer);\r\n    }\r\n    const timer = setInterval(() => {\r\n      setGameState((prevState) => {\r\n        if (prevState.travel.timeRemaining > 1) {\r\n          const updatedGameState = {\r\n            ...prevState,\r\n            travel: {\r\n              ...prevState.travel,\r\n              timeRemaining: prevState.travel.timeRemaining - 1,\r\n            },\r\n          };\r\n          console.log(\"Updated Game State (During Travel): \", updatedGameState);\r\n          return updatedGameState;\r\n        } else {\r\n          clearInterval(timer);\r\n          setTravelTimer(null); // Clear the travel timer state\r\n          // Update gameState once travel is complete\r\n          const completedGameState = {\r\n            ...prevState,\r\n            currentLocation: location.id,\r\n            travel: {\r\n              currentLocation: location.id,\r\n              destination: '',\r\n              timeRemaining: 0,\r\n              isTraveling: false,\r\n            },\r\n          };\r\n          console.log(\"Updated Game State (Travel Complete): \", completedGameState);\r\n          return completedGameState;\r\n        }\r\n      });\r\n    }, 1000);\r\n    setTravelTimer(timer);\r\n  };\r\n\r\n  // Handle mouse hover over a location\r\n  const handleMouseEnter = (location) => {\r\n    setHoveredLocation(location);\r\n    console.log(`Hovered over location: ${location.name}`);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    console.log(\"Mouse left location: \", hoveredLocation ? hoveredLocation.name : \"None\");\r\n    setHoveredLocation(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"Updated Game State (Current Location): \", gameState.currentLocation);\r\n  }, [gameState.currentLocation]);\r\n\r\n  return (\r\n    <div className={styles.worldMapContainer}>\r\n      <button onClick={toggleMap} className={styles.mapButton}>\r\n        <img src={mapIcon} alt=\"Map\" className={styles.mapIcon} />\r\n      </button>\r\n\r\n      {/* Display Current Location */}\r\n      <p className={styles.currentLocation}>Currently at: {gameState.currentLocation}</p>\r\n\r\n      {isMapOpen && (\r\n        <div className={styles.mapModal}>\r\n          <img src={worldMapImage} alt=\"World Map\" className={styles.mapImage} />\r\n          <div className={styles.locationsContainer}>\r\n            {worldLocations.map((location) => (\r\n              <div key={location.id}>\r\n                {/* Location Marker */}\r\n                <div\r\n                  className={styles.locationMarker}\r\n                  style={{\r\n                    top: location.coordinates.top,\r\n                    left: location.coordinates.left,\r\n                  }}\r\n                  onClick={() => travelToLocation(location)}\r\n                  onMouseEnter={() => handleMouseEnter(location)}\r\n                  onMouseLeave={handleMouseLeave}\r\n                />\r\n                \r\n                {/* Location Name on Hover */}\r\n                {hoveredLocation && hoveredLocation.id === location.id && (\r\n                  <div\r\n                    className={styles.locationNameTooltip}\r\n                    style={{\r\n                      top: `calc(${location.coordinates.top} - 20px)`,\r\n                      left: location.coordinates.left,\r\n                    }}\r\n                  >\r\n                    {location.name}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <button onClick={toggleMap} className={styles.closeButton}>Close Map</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}