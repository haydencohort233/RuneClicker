{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\achievements\\\\achievements.js\",\n  _s = $RefreshSig$();\n// /src/components/achievements/achievements.js\nimport React, { useEffect, useState } from 'react';\nimport styles from './achievements.module.css';\nimport achievementData from './achievements-list.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Achievements({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [achievements, setAchievements] = useState({});\n\n  // Convert string condition to a function\n  const parseCondition = conditionString => {\n    // eslint-disable-next-line no-new-func\n    return new Function('gs', `return ${conditionString}`);\n  };\n\n  // Load achievements from JSON and parse conditions\n  const achievementList = achievementData.achievements.map(achievement => ({\n    ...achievement,\n    condition: parseCondition(achievement.condition)\n  }));\n  useEffect(() => {\n    // Initialize achievements in gameState if not already present\n    if (!gameState.achievements) {\n      setGameState(prevState => ({\n        ...prevState,\n        achievements: achievementList.reduce((acc, achievement) => {\n          acc[achievement.id] = false;\n          return acc;\n        }, {})\n      }));\n      return; // Exit early if achievements were not initialized yet\n    }\n\n    // Check for completed achievements\n    const unlockedAchievements = achievementList.filter(achievement => achievement.condition(gameState));\n\n    // Update local achievements state\n    const updatedAchievements = {\n      ...gameState.achievements\n    };\n    unlockedAchievements.forEach(achievement => {\n      updatedAchievements[achievement.id] = true;\n    });\n    setAchievements(updatedAchievements);\n\n    // Update gameState with only newly unlocked achievements\n    if (unlockedAchievements.some(achievement => !gameState.achievements[achievement.id])) {\n      setGameState(prevState => ({\n        ...prevState,\n        achievements: updatedAchievements\n      }));\n    }\n  }, [gameState, setGameState]);\n\n  // Dev Button to clear all achievements\n  const clearAllAchievements = () => {\n    console.log('Clearing all achievements for testing purposes');\n    const clearedAchievements = Object.keys(gameState.achievements).reduce((acc, key) => {\n      acc[key] = false;\n      return acc;\n    }, {});\n    setAchievements(clearedAchievements);\n    setGameState(prevState => ({\n      ...prevState,\n      achievements: clearedAchievements\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.achievementsContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Achievements\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.achievementList,\n      children: achievementList.map(achievement => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: achievements[achievement.id] ? `${styles.achievementItem} ${styles.achieved}` : styles.achievementItem,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: achievement.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: achievement.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, achievement.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearAllAchievements,\n      className: `${styles.achievementButton} ${styles.devButton}`,\n      children: \"Clear All Achievements (Dev Button)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(Achievements, \"e6meEyPLCds6E+4W7ZuaZld2ou0=\");\n_c = Achievements;\nexport default Achievements;\nvar _c;\n$RefreshReg$(_c, \"Achievements\");","map":{"version":3,"names":["React","useEffect","useState","styles","achievementData","jsxDEV","_jsxDEV","Achievements","gameState","setGameState","_s","achievements","setAchievements","parseCondition","conditionString","Function","achievementList","map","achievement","condition","prevState","reduce","acc","id","unlockedAchievements","filter","updatedAchievements","forEach","some","clearAllAchievements","console","log","clearedAchievements","Object","keys","key","className","achievementsContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","achievementItem","achieved","name","description","onClick","achievementButton","devButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/achievements/achievements.js"],"sourcesContent":["// /src/components/achievements/achievements.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport styles from './achievements.module.css';\r\nimport achievementData from './achievements-list.json';\r\n\r\nfunction Achievements({ gameState, setGameState }) {\r\n  const [achievements, setAchievements] = useState({});\r\n\r\n  // Convert string condition to a function\r\n  const parseCondition = (conditionString) => {\r\n    // eslint-disable-next-line no-new-func\r\n    return new Function('gs', `return ${conditionString}`);\r\n  };\r\n\r\n  // Load achievements from JSON and parse conditions\r\n  const achievementList = achievementData.achievements.map((achievement) => ({\r\n    ...achievement,\r\n    condition: parseCondition(achievement.condition),\r\n  }));\r\n\r\n  useEffect(() => {\r\n    // Initialize achievements in gameState if not already present\r\n    if (!gameState.achievements) {\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        achievements: achievementList.reduce((acc, achievement) => {\r\n          acc[achievement.id] = false;\r\n          return acc;\r\n        }, {}),\r\n      }));\r\n      return; // Exit early if achievements were not initialized yet\r\n    }\r\n\r\n    // Check for completed achievements\r\n    const unlockedAchievements = achievementList.filter((achievement) => achievement.condition(gameState));\r\n\r\n    // Update local achievements state\r\n    const updatedAchievements = { ...gameState.achievements };\r\n    unlockedAchievements.forEach((achievement) => {\r\n      updatedAchievements[achievement.id] = true;\r\n    });\r\n\r\n    setAchievements(updatedAchievements);\r\n\r\n    // Update gameState with only newly unlocked achievements\r\n    if (unlockedAchievements.some((achievement) => !gameState.achievements[achievement.id])) {\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        achievements: updatedAchievements,\r\n      }));\r\n    }\r\n  }, [gameState, setGameState]);\r\n\r\n  // Dev Button to clear all achievements\r\n  const clearAllAchievements = () => {\r\n    console.log('Clearing all achievements for testing purposes');\r\n    const clearedAchievements = Object.keys(gameState.achievements).reduce((acc, key) => {\r\n      acc[key] = false;\r\n      return acc;\r\n    }, {});\r\n    setAchievements(clearedAchievements);\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      achievements: clearedAchievements,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.achievementsContainer}>\r\n      <h2>Achievements</h2>\r\n      <div className={styles.achievementList}>\r\n        {achievementList.map((achievement) => (\r\n          <div\r\n            key={achievement.id}\r\n            className={\r\n              achievements[achievement.id]\r\n                ? `${styles.achievementItem} ${styles.achieved}`\r\n                : styles.achievementItem\r\n            }\r\n          >\r\n            <h3>{achievement.name}</h3>\r\n            <p>{achievement.description}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={clearAllAchievements} className={`${styles.achievementButton} ${styles.devButton}`}>Clear All Achievements (Dev Button)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Achievements;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}