{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\achievements\\\\achievements.js\",\n  _s = $RefreshSig$();\n// /src/components/achievements/achievements.js\nimport React, { useEffect, useState } from 'react';\nimport styles from './achievements.module.css';\nimport achievementData from './achievements-list.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Achievements({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [achievements, setAchievements] = useState([]);\n\n  // Convert string condition to a function\n  const parseCondition = conditionString => {\n    // eslint-disable-next-line no-new-func\n    return new Function('gs', `return ${conditionString}`);\n  };\n\n  // Load achievements from JSON and parse conditions\n  const achievementList = achievementData.achievements.map(achievement => ({\n    ...achievement,\n    condition: parseCondition(achievement.condition)\n  }));\n  useEffect(() => {\n    // Initialize achievements in gameState if not already present\n    if (!gameState.achievements) {\n      setGameState(prevState => ({\n        ...prevState,\n        achievements: []\n      }));\n      return; // Exit early if achievements were not initialized yet\n    }\n\n    // Check for completed achievements\n    const unlockedAchievements = achievementList.filter(achievement => achievement.condition(gameState));\n\n    // Update local achievements state\n    setAchievements(unlockedAchievements);\n\n    // Update gameState with only newly unlocked achievements\n    const newAchievements = unlockedAchievements.filter(achievement => !gameState.achievements.some(ach => ach.id === achievement.id));\n    if (newAchievements.length > 0) {\n      setGameState(prevState => ({\n        ...prevState,\n        achievements: [...prevState.achievements, ...newAchievements.map(achievement => ({\n          id: achievement.id,\n          name: achievement.name\n        }))]\n      }));\n    }\n  }, [gameState, setGameState]);\n\n  // Dev Button to clear all achievements\n  const clearAllAchievements = () => {\n    console.log('Clearing all achievements for testing purposes');\n    setAchievements([]); // Clear local state for achievements\n    setGameState(prevState => ({\n      ...prevState,\n      achievements: []\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.achievementsContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Achievements\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.achievementList,\n      children: achievementList.map(achievement => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: gameState.achievements.some(ach => ach.id === achievement.id) ? `${styles.achievementItem} ${styles.achieved}` : styles.achievementItem,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: achievement.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: achievement.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, achievement.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearAllAchievements,\n      className: `${styles.achievementButton} ${styles.devButton}`,\n      children: \"Clear All Achievements (Dev Button)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(Achievements, \"nKMvePRuBynotSBsIfo1WeQZI2Q=\");\n_c = Achievements;\nexport default Achievements;\nvar _c;\n$RefreshReg$(_c, \"Achievements\");","map":{"version":3,"names":["React","useEffect","useState","styles","achievementData","jsxDEV","_jsxDEV","Achievements","gameState","setGameState","_s","achievements","setAchievements","parseCondition","conditionString","Function","achievementList","map","achievement","condition","prevState","unlockedAchievements","filter","newAchievements","some","ach","id","length","name","clearAllAchievements","console","log","className","achievementsContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","achievementItem","achieved","description","onClick","achievementButton","devButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/achievements/achievements.js"],"sourcesContent":["// /src/components/achievements/achievements.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport styles from './achievements.module.css';\r\nimport achievementData from './achievements-list.json';\r\n\r\nfunction Achievements({ gameState, setGameState }) {\r\n  const [achievements, setAchievements] = useState([]);\r\n\r\n  // Convert string condition to a function\r\n  const parseCondition = (conditionString) => {\r\n    // eslint-disable-next-line no-new-func\r\n    return new Function('gs', `return ${conditionString}`);\r\n  };\r\n\r\n  // Load achievements from JSON and parse conditions\r\n  const achievementList = achievementData.achievements.map((achievement) => ({\r\n    ...achievement,\r\n    condition: parseCondition(achievement.condition),\r\n  }));\r\n\r\n  useEffect(() => {\r\n    // Initialize achievements in gameState if not already present\r\n    if (!gameState.achievements) {\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        achievements: [],\r\n      }));\r\n      return; // Exit early if achievements were not initialized yet\r\n    }\r\n\r\n    // Check for completed achievements\r\n    const unlockedAchievements = achievementList.filter((achievement) => achievement.condition(gameState));\r\n\r\n    // Update local achievements state\r\n    setAchievements(unlockedAchievements);\r\n\r\n    // Update gameState with only newly unlocked achievements\r\n    const newAchievements = unlockedAchievements.filter(\r\n      (achievement) => !gameState.achievements.some((ach) => ach.id === achievement.id)\r\n    );\r\n\r\n    if (newAchievements.length > 0) {\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        achievements: [\r\n          ...prevState.achievements,\r\n          ...newAchievements.map((achievement) => ({\r\n            id: achievement.id,\r\n            name: achievement.name,\r\n          })),\r\n        ],\r\n      }));\r\n    }\r\n  }, [gameState, setGameState]);\r\n\r\n  // Dev Button to clear all achievements\r\n  const clearAllAchievements = () => {\r\n    console.log('Clearing all achievements for testing purposes');\r\n    setAchievements([]); // Clear local state for achievements\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      achievements: [],\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.achievementsContainer}>\r\n      <h2>Achievements</h2>\r\n      <div className={styles.achievementList}>\r\n        {achievementList.map((achievement) => (\r\n          <div\r\n            key={achievement.id}\r\n            className={\r\n              gameState.achievements.some((ach) => ach.id === achievement.id)\r\n                ? `${styles.achievementItem} ${styles.achieved}`\r\n                : styles.achievementItem\r\n            }\r\n          >\r\n            <h3>{achievement.name}</h3>\r\n            <p>{achievement.description}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={clearAllAchievements} className={`${styles.achievementButton} ${styles.devButton}`}>Clear All Achievements (Dev Button)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Achievements;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}