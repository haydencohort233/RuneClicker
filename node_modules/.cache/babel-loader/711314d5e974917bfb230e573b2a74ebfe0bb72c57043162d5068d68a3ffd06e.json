{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\currency\\\\currency.js\",\n  _s = $RefreshSig$();\n// /components/currency.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Currency({\n  gameState,\n  setGameState = () => {}\n}) {\n  _s();\n  const [currency, setCurrency] = useState(0);\n  const [totalIncome, setTotalIncome] = useState(0);\n\n  // Load currency from gameState when component mounts\n  useEffect(() => {\n    if (gameState && gameState.currency !== undefined) {\n      setCurrency(gameState.currency);\n    }\n    if (gameState && gameState.buildings) {\n      calculateTotalIncome(gameState.buildings);\n    }\n  }, [gameState]);\n\n  // Update gameState whenever currency changes\n  useEffect(() => {\n    if (typeof setGameState === 'function') {\n      setGameState(prevState => ({\n        ...prevState,\n        currency: currency\n      }));\n    }\n  }, [currency, setGameState]);\n\n  // Function to increment currency\n  const incrementCurrency = () => {\n    setCurrency(prevCurrency => prevCurrency + 1);\n  };\n\n  // Function to clear currency\n  const clearCurrency = () => {\n    console.log('Clearing currency for testing purposes');\n    setCurrency(0);\n  };\n\n  // Function to calculate total income per second\n  const calculateTotalIncome = buildings => {\n    let income = 0;\n    for (const [buildingName, {\n      count\n    }] of Object.entries(buildings)) {\n      if (count > 0 && gameState.buildingStats && gameState.buildingStats[buildingName]) {\n        const buildingIncome = gameState.buildingStats[buildingName].income;\n        income += buildingIncome * count;\n      }\n    }\n    setTotalIncome(income);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"currency-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Currency: \", currency]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Total Income per Second: \", totalIncome]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCurrency,\n      children: \"Earn Currency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearCurrency,\n      children: \"Clear Currency (Dev Button)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(Currency, \"4Dn+NEUTUiFocA98RnRuV/vz1xQ=\");\n_c = Currency;\nexport default Currency;\nvar _c;\n$RefreshReg$(_c, \"Currency\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Currency","gameState","setGameState","_s","currency","setCurrency","totalIncome","setTotalIncome","undefined","buildings","calculateTotalIncome","prevState","incrementCurrency","prevCurrency","clearCurrency","console","log","income","buildingName","count","Object","entries","buildingStats","buildingIncome","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/currency/currency.js"],"sourcesContent":["// /components/currency.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Currency({ gameState, setGameState = () => {} }) {\r\n  const [currency, setCurrency] = useState(0);\r\n  const [totalIncome, setTotalIncome] = useState(0);\r\n\r\n  // Load currency from gameState when component mounts\r\n  useEffect(() => {\r\n    if (gameState && gameState.currency !== undefined) {\r\n      setCurrency(gameState.currency);\r\n    }\r\n    if (gameState && gameState.buildings) {\r\n      calculateTotalIncome(gameState.buildings);\r\n    }\r\n  }, [gameState]);\r\n\r\n  // Update gameState whenever currency changes\r\n  useEffect(() => {\r\n    if (typeof setGameState === 'function') {\r\n      setGameState(prevState => ({\r\n        ...prevState,\r\n        currency: currency\r\n      }));\r\n    }\r\n  }, [currency, setGameState]);\r\n\r\n  // Function to increment currency\r\n  const incrementCurrency = () => {\r\n    setCurrency(prevCurrency => prevCurrency + 1);\r\n  };\r\n\r\n  // Function to clear currency\r\n  const clearCurrency = () => {\r\n    console.log('Clearing currency for testing purposes');\r\n    setCurrency(0);\r\n  };\r\n\r\n  // Function to calculate total income per second\r\n  const calculateTotalIncome = (buildings) => {\r\n    let income = 0;\r\n    for (const [buildingName, { count }] of Object.entries(buildings)) {\r\n      if (count > 0 && gameState.buildingStats && gameState.buildingStats[buildingName]) {\r\n        const buildingIncome = gameState.buildingStats[buildingName].income;\r\n        income += buildingIncome * count;\r\n      }\r\n    }\r\n    setTotalIncome(income);\r\n  };\r\n\r\n  return (\r\n    <div className=\"currency-container\">\r\n      <h3>Currency: {currency}</h3>\r\n      <h4>Total Income per Second: {totalIncome}</h4>\r\n      <button onClick={incrementCurrency}>Earn Currency</button>\r\n      <button onClick={clearCurrency}>Clear Currency (Dev Button)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Currency;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}