{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\gamesaves\\\\gameSaves.js\";\n// /src/components/gamesaves/gameSaves.js\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameSaves({\n  userId,\n  gameState,\n  setGameState\n}) {\n  // Save the current game state to the server, including currency and last_active\n  const saveGameToServer = async () => {\n    try {\n      const updatedGameState = {\n        ...gameState,\n        last_active: new Date().toISOString() // Adding last_active timestamp\n      };\n      const response = await fetch('http://localhost:5000/api/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          gameState: updatedGameState\n        })\n      });\n      const data = await response.json();\n      console.log(data.message);\n    } catch (error) {\n      console.error('Failed to save game to server:', error);\n    }\n  };\n\n  // Load the game state from the server, including currency and last_active\n  const loadGameFromServer = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/load-game/${userId}`);\n      if (response.ok) {\n        const data = await response.json();\n        const loadedGameState = JSON.parse(data.gameState);\n\n        // Update local state with loaded data\n        setGameState(prevState => ({\n          ...prevState,\n          ...loadedGameState\n        }));\n        console.log('Game state loaded successfully:', loadedGameState);\n      } else {\n        console.error('No saved game found.');\n      }\n    } catch (error) {\n      console.error('Failed to load game from server:', error);\n    }\n  };\n\n  // Export the current game state as a JSON file\n  const exportGameState = () => {\n    const jsonString = JSON.stringify(gameState, null, 2);\n    const blob = new Blob([jsonString], {\n      type: 'application/json'\n    });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = 'gameState.json';\n    link.click();\n  };\n\n  // Import a saved game state from a JSON file\n  const importGameState = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const content = e.target.result;\n      const importedGameState = JSON.parse(content);\n      setGameState(importedGameState);\n\n      // Optionally, save imported game state to server\n      saveGameToServer();\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-saves\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Game Saves\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveGameToServer,\n      children: \"Save Game to Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadGameFromServer,\n      children: \"Load Game from Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportGameState,\n      children: \"Export Game State\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"application/json\",\n      onChange: importGameState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_c = GameSaves;\nexport default GameSaves;\nvar _c;\n$RefreshReg$(_c, \"GameSaves\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","GameSaves","userId","gameState","setGameState","saveGameToServer","updatedGameState","last_active","Date","toISOString","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","message","error","loadGameFromServer","ok","loadedGameState","parse","prevState","exportGameState","jsonString","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click","importGameState","event","file","target","files","reader","FileReader","onload","e","content","result","importedGameState","readAsText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","accept","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/gamesaves/gameSaves.js"],"sourcesContent":["// /src/components/gamesaves/gameSaves.js\r\nimport React from 'react';\r\n\r\nfunction GameSaves({ userId, gameState, setGameState }) {\r\n  // Save the current game state to the server, including currency and last_active\r\n  const saveGameToServer = async () => {\r\n    try {\r\n      const updatedGameState = {\r\n        ...gameState,\r\n        last_active: new Date().toISOString(), // Adding last_active timestamp\r\n      };\r\n      const response = await fetch('http://localhost:5000/api/save-game', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n          gameState: updatedGameState,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(data.message);\r\n    } catch (error) {\r\n      console.error('Failed to save game to server:', error);\r\n    }\r\n  };\r\n\r\n  // Load the game state from the server, including currency and last_active\r\n  const loadGameFromServer = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/load-game/${userId}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const loadedGameState = JSON.parse(data.gameState);\r\n\r\n        // Update local state with loaded data\r\n        setGameState((prevState) => ({\r\n          ...prevState,\r\n          ...loadedGameState,\r\n        }));\r\n        console.log('Game state loaded successfully:', loadedGameState);\r\n      } else {\r\n        console.error('No saved game found.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load game from server:', error);\r\n    }\r\n  };\r\n\r\n  // Export the current game state as a JSON file\r\n  const exportGameState = () => {\r\n    const jsonString = JSON.stringify(gameState, null, 2);\r\n    const blob = new Blob([jsonString], { type: 'application/json' });\r\n    const link = document.createElement('a');\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = 'gameState.json';\r\n    link.click();\r\n  };\r\n\r\n  // Import a saved game state from a JSON file\r\n  const importGameState = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const content = e.target.result;\r\n      const importedGameState = JSON.parse(content);\r\n      setGameState(importedGameState);\r\n\r\n      // Optionally, save imported game state to server\r\n      saveGameToServer();\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-saves\">\r\n      <h2>Game Saves</h2>\r\n      <button onClick={saveGameToServer}>Save Game to Server</button>\r\n      <button onClick={loadGameFromServer}>Load Game from Server</button>\r\n      <button onClick={exportGameState}>Export Game State</button>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"application/json\"\r\n        onChange={importGameState}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameSaves;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}