{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\gamesaves\\\\gameSaves.js\",\n  _s = $RefreshSig$();\n// /src/components/gamesaves/gameSaves.js\nimport React, { useRef } from 'react';\nimport styles from './gameSaves.module.css';\nimport saveIcon from '../../assets/images/save_game_state.png';\nimport loadIcon from '../../assets/images/load_game_state.png';\nimport exportIcon from '../../assets/images/import_game_state.png';\nimport importIcon from '../../assets/images/import_game_state.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameSaves({\n  userId,\n  gameState,\n  setGameState\n}) {\n  _s();\n  const fileInputRef = useRef(null);\n\n  // Save the current game state to the server, including currency and last_active\n  const saveGameToServer = async () => {\n    try {\n      const updatedGameState = {\n        ...gameState,\n        last_active: new Date().toISOString() // Adding last_active timestamp\n      };\n      const response = await fetch('http://localhost:5000/api/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          gameState: updatedGameState\n        })\n      });\n      const data = await response.json();\n      console.log(data.message);\n    } catch (error) {\n      console.error('Failed to save game to server:', error);\n    }\n  };\n\n  // Load the game state from the server, including currency and last_active\n  const loadGameFromServer = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/load-game/${userId}`);\n      if (response.ok) {\n        const data = await response.json();\n        const loadedGameState = data.gameState;\n\n        // Update local state with loaded data\n        setGameState(prevState => ({\n          ...prevState,\n          ...loadedGameState\n        }));\n        console.log('Game state loaded successfully:', loadedGameState);\n      } else {\n        console.error('No saved game found.');\n      }\n    } catch (error) {\n      console.error('Failed to load game from server:', error);\n    }\n  };\n\n  // Export the current game state as a JSON file, including all fields, and adding username and password for testing purposes\n  const exportGameState = async () => {\n    try {\n      // Fetch user details (username and password) for export\n      const response = await fetch(`http://localhost:5000/api/user-details/${userId}`);\n      if (response.ok) {\n        const userData = await response.json();\n        const exportState = {\n          ...gameState,\n          username: userData.username,\n          password: userData.password,\n          // For testing purposes only\n          last_active: userData.last_active\n        };\n        const jsonString = JSON.stringify(exportState, null, 2);\n        const blob = new Blob([jsonString], {\n          type: 'application/json'\n        });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = 'gameState.json';\n        link.click();\n      } else {\n        console.error('Failed to fetch user details for export.');\n      }\n    } catch (error) {\n      console.error('Failed to export game state:', error);\n    }\n  };\n\n  // Import a saved game state from a JSON file\n  const importGameState = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const content = e.target.result;\n      const importedGameState = JSON.parse(content);\n      setGameState(prevState => ({\n        ...prevState,\n        ...importedGameState\n      }));\n\n      // Optionally, save imported game state to server\n      saveGameToServer();\n    };\n    reader.readAsText(file);\n  };\n\n  // Trigger file input click\n  const handleImportClick = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.gameSaves,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Game Saves\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttonContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveGameToServer,\n        className: styles.gameButton,\n        title: \"Save Game\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: saveIcon,\n          alt: \"Save Game\",\n          className: styles.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), \"Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadGameFromServer,\n        className: styles.gameButton,\n        title: \"Load Game\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: loadIcon,\n          alt: \"Load Game\",\n          className: styles.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), \"Load\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportGameState,\n        className: styles.gameButton,\n        title: \"Export Game\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: exportIcon,\n          alt: \"Export Game\",\n          className: styles.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), \"Export\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleImportClick,\n        className: styles.gameButton,\n        title: \"Import Game\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: importIcon,\n          alt: \"Import Game\",\n          className: styles.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), \"Import\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/json\",\n        onChange: importGameState,\n        ref: fileInputRef,\n        className: styles.fileInputHidden\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(GameSaves, \"YQqvMxdmg33cmOXmQcOjJm+FLVI=\");\n_c = GameSaves;\nexport default GameSaves;\nvar _c;\n$RefreshReg$(_c, \"GameSaves\");","map":{"version":3,"names":["React","useRef","styles","saveIcon","loadIcon","exportIcon","importIcon","jsxDEV","_jsxDEV","GameSaves","userId","gameState","setGameState","_s","fileInputRef","saveGameToServer","updatedGameState","last_active","Date","toISOString","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","message","error","loadGameFromServer","ok","loadedGameState","prevState","exportGameState","userData","exportState","username","password","jsonString","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click","importGameState","event","file","target","files","reader","FileReader","onload","e","content","result","importedGameState","parse","readAsText","handleImportClick","current","className","gameSaves","children","fileName","_jsxFileName","lineNumber","columnNumber","buttonContainer","onClick","gameButton","title","src","alt","icon","accept","onChange","ref","fileInputHidden","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/gamesaves/gameSaves.js"],"sourcesContent":["// /src/components/gamesaves/gameSaves.js\r\nimport React, { useRef } from 'react';\r\nimport styles from './gameSaves.module.css';\r\nimport saveIcon from '../../assets/images/save_game_state.png';\r\nimport loadIcon from '../../assets/images/load_game_state.png';\r\nimport exportIcon from '../../assets/images/import_game_state.png';\r\nimport importIcon from '../../assets/images/import_game_state.png';\r\n\r\nfunction GameSaves({ userId, gameState, setGameState }) {\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Save the current game state to the server, including currency and last_active\r\n  const saveGameToServer = async () => {\r\n    try {\r\n      const updatedGameState = {\r\n        ...gameState,\r\n        last_active: new Date().toISOString(), // Adding last_active timestamp\r\n      };\r\n      const response = await fetch('http://localhost:5000/api/save-game', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n          gameState: updatedGameState,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(data.message);\r\n    } catch (error) {\r\n      console.error('Failed to save game to server:', error);\r\n    }\r\n  };\r\n\r\n  // Load the game state from the server, including currency and last_active\r\n  const loadGameFromServer = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/load-game/${userId}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const loadedGameState = data.gameState;\r\n\r\n        // Update local state with loaded data\r\n        setGameState((prevState) => ({\r\n          ...prevState,\r\n          ...loadedGameState,\r\n        }));\r\n        console.log('Game state loaded successfully:', loadedGameState);\r\n      } else {\r\n        console.error('No saved game found.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load game from server:', error);\r\n    }\r\n  };\r\n\r\n  // Export the current game state as a JSON file, including all fields, and adding username and password for testing purposes\r\n  const exportGameState = async () => {\r\n    try {\r\n      // Fetch user details (username and password) for export\r\n      const response = await fetch(`http://localhost:5000/api/user-details/${userId}`);\r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        const exportState = {\r\n          ...gameState,\r\n          username: userData.username,\r\n          password: userData.password, // For testing purposes only\r\n          last_active: userData.last_active,\r\n        };\r\n        const jsonString = JSON.stringify(exportState, null, 2);\r\n        const blob = new Blob([jsonString], { type: 'application/json' });\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = 'gameState.json';\r\n        link.click();\r\n      } else {\r\n        console.error('Failed to fetch user details for export.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to export game state:', error);\r\n    }\r\n  };\r\n\r\n  // Import a saved game state from a JSON file\r\n  const importGameState = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const content = e.target.result;\r\n      const importedGameState = JSON.parse(content);\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        ...importedGameState,\r\n      }));\r\n\r\n      // Optionally, save imported game state to server\r\n      saveGameToServer();\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Trigger file input click\r\n  const handleImportClick = () => {\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.click();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.gameSaves}>\r\n      <h2>Game Saves</h2>\r\n      <div className={styles.buttonContainer}>\r\n        <button onClick={saveGameToServer} className={styles.gameButton} title='Save Game'>\r\n          <img src={saveIcon} alt=\"Save Game\" className={styles.icon} />\r\n          Save\r\n        </button>\r\n        <button onClick={loadGameFromServer} className={styles.gameButton} title='Load Game'>\r\n          <img src={loadIcon} alt=\"Load Game\" className={styles.icon} />\r\n          Load\r\n        </button>\r\n        <button onClick={exportGameState} className={styles.gameButton} title='Export Game'>\r\n          <img src={exportIcon} alt=\"Export Game\" className={styles.icon} />\r\n          Export\r\n        </button>\r\n        <button onClick={handleImportClick} className={styles.gameButton} title='Import Game'>\r\n          <img src={importIcon} alt=\"Import Game\" className={styles.icon} />\r\n          Import\r\n        </button>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"application/json\"\r\n          onChange={importGameState}\r\n          ref={fileInputRef}\r\n          className={styles.fileInputHidden}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameSaves;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}