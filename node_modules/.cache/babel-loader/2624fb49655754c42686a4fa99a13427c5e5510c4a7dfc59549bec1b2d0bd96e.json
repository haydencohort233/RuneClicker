{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\worldmap\\\\worldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './worldMap.module.css';\nimport worldLocations from './worldLocations.json';\nimport mapIcon from '../../assets/images/icons/map.png';\nimport worldMapImage from '../../assets/images/worldmap/worldmap.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WorldMap({\n  gameState,\n  setGameState\n}) {\n  _s();\n  var _gameState$travel3;\n  const [isMapOpen, setIsMapOpen] = useState(false);\n  const [hoveredLocation, setHoveredLocation] = useState(null);\n  const [travelTimer, setTravelTimer] = useState(null);\n  const [confirmationModal, setConfirmationModal] = useState(null);\n\n  // Toggle map visibility\n  const toggleMap = () => {\n    setIsMapOpen(prev => !prev);\n  };\n\n  // Handle traveling to a specific location\n  const initiateTravelToLocation = location => {\n    var _gameState$travel, _gameState$travel2;\n    // Prevent traveling to the current location or if destination is already set\n    if (((_gameState$travel = gameState.travel) === null || _gameState$travel === void 0 ? void 0 : _gameState$travel.currentLocation) === location.id || (_gameState$travel2 = gameState.travel) !== null && _gameState$travel2 !== void 0 && _gameState$travel2.isTraveling) {\n      console.log(\"You are already at this location or currently traveling.\");\n      return;\n    }\n    // Show confirmation modal before starting travel\n    setConfirmationModal(location);\n  };\n  const confirmTravel = location => {\n    // Set travel state in gameState\n    setGameState(prevState => {\n      var _prevState$travel;\n      return {\n        ...prevState,\n        travel: {\n          currentLocation: ((_prevState$travel = prevState.travel) === null || _prevState$travel === void 0 ? void 0 : _prevState$travel.currentLocation) || \"spawn\",\n          destination: location.name,\n          timeRemaining: location.travelTime,\n          isTraveling: true\n        }\n      };\n    });\n    setIsMapOpen(false); // Close the map after choosing a destination\n    setConfirmationModal(null); // Close the confirmation modal\n\n    // Start the travel timer\n    if (travelTimer) {\n      clearInterval(travelTimer);\n    }\n    const timer = setInterval(() => {\n      setGameState(prevState => {\n        if (prevState.travel.timeRemaining > 1) {\n          return {\n            ...prevState,\n            travel: {\n              ...prevState.travel,\n              timeRemaining: prevState.travel.timeRemaining - 1\n            }\n          };\n        } else {\n          clearInterval(timer);\n          setTravelTimer(null); // Clear the travel timer state\n          // Update gameState once travel is complete\n          return {\n            ...prevState,\n            currentLocation: location.id,\n            // Update the currentLocation here\n            travel: {\n              currentLocation: location.id,\n              destination: \"\",\n              timeRemaining: 0,\n              isTraveling: false\n            }\n          };\n        }\n      });\n    }, 1000);\n    setTravelTimer(timer);\n  };\n  const cancelTravel = () => {\n    setConfirmationModal(null);\n  };\n\n  // Handle mouse hover over a location\n  const handleMouseEnter = location => {\n    setHoveredLocation(location);\n  };\n  const handleMouseLeave = () => {\n    setHoveredLocation(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.worldMapContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleMap,\n      className: styles.mapButton,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: mapIcon,\n        alt: \"Map\",\n        className: styles.mapIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.currentLocation,\n      children: [\"Currently at: \", ((_gameState$travel3 = gameState.travel) === null || _gameState$travel3 === void 0 ? void 0 : _gameState$travel3.currentLocation) || \"Unknown\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), isMapOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.mapModal,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: worldMapImage,\n        alt: \"World Map\",\n        className: styles.mapImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.locationsContainer,\n        children: worldLocations.map(location => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.locationMarker,\n            style: {\n              top: location.coordinates.top,\n              left: location.coordinates.left\n            },\n            onClick: () => initiateTravelToLocation(location),\n            onMouseEnter: () => handleMouseEnter(location),\n            onMouseLeave: handleMouseLeave\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this), hoveredLocation && hoveredLocation.id === location.id && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.locationNameTooltip,\n            style: {\n              top: `calc(${location.coordinates.top} - 20px)`,\n              left: location.coordinates.left\n            },\n            children: location.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 19\n          }, this)]\n        }, location.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMap,\n        className: styles.closeButton,\n        children: \"Close Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), confirmationModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.confirmationModal,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Do you want to travel to \", confirmationModal.name, \"?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => confirmTravel(confirmationModal),\n        children: \"Yes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: cancelTravel,\n        children: \"No\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(WorldMap, \"i8rt9xA+caupF9zaA6Zhxsaei9o=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useState","useEffect","styles","worldLocations","mapIcon","worldMapImage","jsxDEV","_jsxDEV","WorldMap","gameState","setGameState","_s","_gameState$travel3","isMapOpen","setIsMapOpen","hoveredLocation","setHoveredLocation","travelTimer","setTravelTimer","confirmationModal","setConfirmationModal","toggleMap","prev","initiateTravelToLocation","location","_gameState$travel","_gameState$travel2","travel","currentLocation","id","isTraveling","console","log","confirmTravel","prevState","_prevState$travel","destination","name","timeRemaining","travelTime","clearInterval","timer","setInterval","cancelTravel","handleMouseEnter","handleMouseLeave","className","worldMapContainer","children","onClick","mapButton","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","mapModal","mapImage","locationsContainer","map","locationMarker","style","top","coordinates","left","onMouseEnter","onMouseLeave","locationNameTooltip","closeButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/worldmap/worldMap.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styles from './worldMap.module.css';\r\nimport worldLocations from './worldLocations.json';\r\nimport mapIcon from '../../assets/images/icons/map.png';\r\nimport worldMapImage from '../../assets/images/worldmap/worldmap.png';\r\n\r\nfunction WorldMap({ gameState, setGameState }) {\r\n  const [isMapOpen, setIsMapOpen] = useState(false);\r\n  const [hoveredLocation, setHoveredLocation] = useState(null);\r\n  const [travelTimer, setTravelTimer] = useState(null);\r\n  const [confirmationModal, setConfirmationModal] = useState(null);\r\n\r\n  // Toggle map visibility\r\n  const toggleMap = () => {\r\n    setIsMapOpen((prev) => !prev);\r\n  };\r\n\r\n  // Handle traveling to a specific location\r\n  const initiateTravelToLocation = (location) => {\r\n    // Prevent traveling to the current location or if destination is already set\r\n    if (gameState.travel?.currentLocation === location.id || gameState.travel?.isTraveling) {\r\n      console.log(\"You are already at this location or currently traveling.\");\r\n      return;\r\n    }\r\n    // Show confirmation modal before starting travel\r\n    setConfirmationModal(location);\r\n  };\r\n\r\n  const confirmTravel = (location) => {\r\n    // Set travel state in gameState\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      travel: {\r\n        currentLocation: prevState.travel?.currentLocation || \"spawn\",\r\n        destination: location.name,\r\n        timeRemaining: location.travelTime,\r\n        isTraveling: true,\r\n      },\r\n    }));\r\n    setIsMapOpen(false); // Close the map after choosing a destination\r\n    setConfirmationModal(null); // Close the confirmation modal\r\n\r\n    // Start the travel timer\r\n    if (travelTimer) {\r\n      clearInterval(travelTimer);\r\n    }\r\n    const timer = setInterval(() => {\r\n      setGameState((prevState) => {\r\n        if (prevState.travel.timeRemaining > 1) {\r\n          return {\r\n            ...prevState,\r\n            travel: {\r\n              ...prevState.travel,\r\n              timeRemaining: prevState.travel.timeRemaining - 1,\r\n            },\r\n          };\r\n        } else {\r\n          clearInterval(timer);\r\n          setTravelTimer(null); // Clear the travel timer state\r\n          // Update gameState once travel is complete\r\n          return {\r\n            ...prevState,\r\n            currentLocation: location.id, // Update the currentLocation here\r\n            travel: {\r\n              currentLocation: location.id,\r\n              destination: \"\",\r\n              timeRemaining: 0,\r\n              isTraveling: false,\r\n            },\r\n          };\r\n        }\r\n      });\r\n    }, 1000);\r\n    setTravelTimer(timer);\r\n  };\r\n\r\n  const cancelTravel = () => {\r\n    setConfirmationModal(null);\r\n  };\r\n\r\n  // Handle mouse hover over a location\r\n  const handleMouseEnter = (location) => {\r\n    setHoveredLocation(location);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredLocation(null);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.worldMapContainer}>\r\n      <button onClick={toggleMap} className={styles.mapButton}>\r\n        <img src={mapIcon} alt=\"Map\" className={styles.mapIcon} />\r\n      </button>\r\n\r\n      {/* Display Current Location */}\r\n      <p className={styles.currentLocation}>Currently at: {gameState.travel?.currentLocation || \"Unknown\"}</p>\r\n\r\n      {isMapOpen && (\r\n        <div className={styles.mapModal}>\r\n          <img src={worldMapImage} alt=\"World Map\" className={styles.mapImage} />\r\n          <div className={styles.locationsContainer}>\r\n            {worldLocations.map((location) => (\r\n              <div key={location.id}>\r\n                {/* Location Marker */}\r\n                <div\r\n                  className={styles.locationMarker}\r\n                  style={{\r\n                    top: location.coordinates.top,\r\n                    left: location.coordinates.left,\r\n                  }}\r\n                  onClick={() => initiateTravelToLocation(location)}\r\n                  onMouseEnter={() => handleMouseEnter(location)}\r\n                  onMouseLeave={handleMouseLeave}\r\n                />\r\n                \r\n                {/* Location Name on Hover */}\r\n                {hoveredLocation && hoveredLocation.id === location.id && (\r\n                  <div\r\n                    className={styles.locationNameTooltip}\r\n                    style={{\r\n                      top: `calc(${location.coordinates.top} - 20px)`,\r\n                      left: location.coordinates.left,\r\n                    }}\r\n                  >\r\n                    {location.name}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <button onClick={toggleMap} className={styles.closeButton}>Close Map</button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Travel Confirmation Modal */}\r\n      {confirmationModal && (\r\n        <div className={styles.confirmationModal}>\r\n          <p>Do you want to travel to {confirmationModal.name}?</p>\r\n          <button onClick={() => confirmTravel(confirmationModal)}>Yes</button>\r\n          <button onClick={cancelTravel}>No</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}