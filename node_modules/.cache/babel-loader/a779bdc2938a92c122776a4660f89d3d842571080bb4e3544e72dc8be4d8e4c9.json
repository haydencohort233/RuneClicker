{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\enemy\\\\enemy.js\",\n  _s = $RefreshSig$();\n// /src/components/enemy/enemy.js\nimport React, { useState, useEffect } from 'react';\nimport enemyStats from './enemy-stats.json';\nimport styles from './enemy.module.css';\nimport worldLocations from '../worldmap/worldLocations.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Enemy({\n  playerLevel,\n  playerItems,\n  currentLocation,\n  onDefeat\n}) {\n  _s();\n  const [currentEnemy, setCurrentEnemy] = useState(null);\n  const [enemyHealth, setEnemyHealth] = useState(0);\n  const [playerAttackPower, setPlayerAttackPower] = useState(10); // Placeholder for player's attack power\n\n  // Function to spawn an enemy based on player level, items, and location\n  useEffect(() => {\n    const currentLocationData = worldLocations.find(location => location.id === currentLocation);\n    if (currentLocationData && currentLocationData.enemies) {\n      const availableEnemies = enemyStats.filter(enemy => {\n        // Ensure the enemy can spawn in the current location and satisfies other conditions\n        return currentLocationData.enemies.includes(enemy.id) && (!enemy.spawnConditions || !enemy.spawnConditions.requiredLevel || playerLevel >= enemy.spawnConditions.requiredLevel) && (!enemy.spawnConditions || !enemy.spawnConditions.requiredItem || playerItems.includes(enemy.spawnConditions.requiredItem));\n      });\n      if (availableEnemies.length > 0) {\n        const randomEnemy = availableEnemies[Math.floor(Math.random() * availableEnemies.length)];\n        setCurrentEnemy(randomEnemy);\n        setEnemyHealth(randomEnemy.health);\n      }\n    }\n  }, [playerLevel, playerItems, currentLocation]);\n\n  // Handle player attack on enemy\n  const handleAttack = () => {\n    if (currentEnemy) {\n      const hitSuccess = Math.random() < playerAttackPower / 100; // Simplified hit chance\n      if (hitSuccess) {\n        const damage = Math.floor(Math.random() * playerAttackPower);\n        setEnemyHealth(prevHealth => Math.max(prevHealth - damage, 0));\n      }\n      if (enemyHealth - playerAttackPower <= 0) {\n        onDefeat(currentEnemy);\n        setCurrentEnemy(null); // Reset enemy state after defeat\n      }\n    }\n  };\n\n  // Handle enemy's behavior logic\n  useEffect(() => {\n    if (currentEnemy && enemyHealth > 0) {\n      const interval = setInterval(() => {\n        if (currentEnemy.behavior === 'aggressive' && Math.random() < currentEnemy.attackChance) {\n          console.log(`${currentEnemy.enemyName} attacks!`);\n          // Here we can add logic to deal damage to the player, handle defense, etc.\n        }\n      }, 2000); // Enemy action every 2 seconds\n      return () => clearInterval(interval);\n    }\n  }, [currentEnemy, enemyHealth]);\n  if (!currentEnemy) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.enemyContainer,\n      children: \"No enemies available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.enemyContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentEnemy.enemyName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: require(`../../assets/images/enemies/${currentEnemy.sprite}`),\n      alt: currentEnemy.enemyName,\n      className: styles.enemySprite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Level: \", currentEnemy.level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Health: \", enemyHealth, \" / \", currentEnemy.health]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAttack,\n      className: styles.attackButton,\n      children: \"Attack\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(Enemy, \"cqgWR9vCSQ7Hg5KFHmJdv4kxyEQ=\");\n_c = Enemy;\nexport default Enemy;\nvar _c;\n$RefreshReg$(_c, \"Enemy\");","map":{"version":3,"names":["React","useState","useEffect","enemyStats","styles","worldLocations","jsxDEV","_jsxDEV","Enemy","playerLevel","playerItems","currentLocation","onDefeat","_s","currentEnemy","setCurrentEnemy","enemyHealth","setEnemyHealth","playerAttackPower","setPlayerAttackPower","currentLocationData","find","location","id","enemies","availableEnemies","filter","enemy","includes","spawnConditions","requiredLevel","requiredItem","length","randomEnemy","Math","floor","random","health","handleAttack","hitSuccess","damage","prevHealth","max","interval","setInterval","behavior","attackChance","console","log","enemyName","clearInterval","className","enemyContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","src","require","sprite","alt","enemySprite","level","onClick","attackButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/enemy/enemy.js"],"sourcesContent":["// /src/components/enemy/enemy.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport enemyStats from './enemy-stats.json';\r\nimport styles from './enemy.module.css';\r\nimport worldLocations from '../worldmap/worldLocations.json';\r\n\r\nfunction Enemy({ playerLevel, playerItems, currentLocation, onDefeat }) {\r\n  const [currentEnemy, setCurrentEnemy] = useState(null);\r\n  const [enemyHealth, setEnemyHealth] = useState(0);\r\n  const [playerAttackPower, setPlayerAttackPower] = useState(10); // Placeholder for player's attack power\r\n\r\n    // Function to spawn an enemy based on player level, items, and location\r\n    useEffect(() => {\r\n    const currentLocationData = worldLocations.find(location => location.id === currentLocation);\r\n\r\n    if (currentLocationData && currentLocationData.enemies) {\r\n        const availableEnemies = enemyStats.filter((enemy) => {\r\n        // Ensure the enemy can spawn in the current location and satisfies other conditions\r\n        return currentLocationData.enemies.includes(enemy.id) &&\r\n            (!enemy.spawnConditions || !enemy.spawnConditions.requiredLevel || playerLevel >= enemy.spawnConditions.requiredLevel) &&\r\n            (!enemy.spawnConditions || !enemy.spawnConditions.requiredItem || playerItems.includes(enemy.spawnConditions.requiredItem));\r\n        });\r\n\r\n        if (availableEnemies.length > 0) {\r\n        const randomEnemy = availableEnemies[Math.floor(Math.random() * availableEnemies.length)];\r\n        setCurrentEnemy(randomEnemy);\r\n        setEnemyHealth(randomEnemy.health);\r\n        }\r\n    }\r\n    }, [playerLevel, playerItems, currentLocation]);\r\n\r\n  // Handle player attack on enemy\r\n  const handleAttack = () => {\r\n    if (currentEnemy) {\r\n      const hitSuccess = Math.random() < playerAttackPower / 100; // Simplified hit chance\r\n      if (hitSuccess) {\r\n        const damage = Math.floor(Math.random() * playerAttackPower);\r\n        setEnemyHealth((prevHealth) => Math.max(prevHealth - damage, 0));\r\n      }\r\n      if (enemyHealth - playerAttackPower <= 0) {\r\n        onDefeat(currentEnemy);\r\n        setCurrentEnemy(null); // Reset enemy state after defeat\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle enemy's behavior logic\r\n  useEffect(() => {\r\n    if (currentEnemy && enemyHealth > 0) {\r\n      const interval = setInterval(() => {\r\n        if (currentEnemy.behavior === 'aggressive' && Math.random() < currentEnemy.attackChance) {\r\n          console.log(`${currentEnemy.enemyName} attacks!`);\r\n          // Here we can add logic to deal damage to the player, handle defense, etc.\r\n        }\r\n      }, 2000); // Enemy action every 2 seconds\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [currentEnemy, enemyHealth]);\r\n\r\n  if (!currentEnemy) {\r\n    return <div className={styles.enemyContainer}>No enemies available</div>;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.enemyContainer}>\r\n      <h3>{currentEnemy.enemyName}</h3>\r\n      <img src={require(`../../assets/images/enemies/${currentEnemy.sprite}`)} alt={currentEnemy.enemyName} className={styles.enemySprite} />\r\n      <p>Level: {currentEnemy.level}</p>\r\n      <p>Health: {enemyHealth} / {currentEnemy.health}</p>\r\n      <button onClick={handleAttack} className={styles.attackButton}>Attack</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Enemy;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}