{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\gamesaves\\\\gameSaves.js\",\n  _s = $RefreshSig$();\n// /src/components/gamesaves/gameSaves.js\nimport React, { useRef } from 'react';\nimport styles from './gameSaves.module.css';\nimport saveIcon from '../../assets/images/icons/save_game_state.png';\nimport loadIcon from '../../assets/images/icons/load_game_state.png';\nimport exportIcon from '../../assets/images/icons/export_game_state.png';\nimport importIcon from '../../assets/images/icons/import_game_state.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameSaves({\n  userId,\n  gameState,\n  setGameState\n}) {\n  _s();\n  const fileInputRef = useRef(null);\n\n  // Save the current game state to the server, including currency and last_active\n  const saveGameToServer = async () => {\n    try {\n      const updatedGameState = {\n        ...gameState,\n        last_active: new Date().toISOString() // Adding last_active timestamp\n      };\n      // Save the entire game state to the server\n      const response = await fetch('http://localhost:5000/api/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          gameState: updatedGameState\n        })\n      });\n      if (response.ok) {\n        console.log('Game state saved successfully:', {\n          ...updatedGameState\n        });\n\n        // Update the currency specifically in the players table\n        const currencyUpdateResponse = await fetch(`http://localhost:5000/api/player/${userId}/update-currency`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            currency: updatedGameState.currency\n          })\n        });\n        if (currencyUpdateResponse.ok) {\n          console.log('Currency updated successfully in players table.');\n        } else {\n          console.error('Failed to update currency in players table.');\n        }\n      } else {\n        console.error('Failed to save game state to server.');\n      }\n    } catch (error) {\n      console.error('Failed to save game to server:', error);\n    }\n  };\n\n  // Load the game state from the server, including currency and last_active\n  const loadGameFromServer = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/load-game/${userId}`);\n      if (response.ok) {\n        const data = await response.json();\n        const loadedGameState = data.gameState;\n\n        // Update local state with loaded data\n        setGameState(prevState => ({\n          ...prevState,\n          ...loadedGameState,\n          travel: loadedGameState.travel || {\n            currentLocation: 'spawn',\n            destination: '',\n            timeRemaining: 0,\n            isTraveling: false\n          }\n        }));\n        console.log('Game state loaded successfully:', loadedGameState);\n      } else {\n        console.error('No saved game found.');\n      }\n    } catch (error) {\n      console.error('Failed to load game from server:', error);\n    }\n  };\n\n  // Export the current game state as a JSON file, including all fields, and adding username and password for testing purposes\n  const exportGameState = async () => {\n    try {\n      // Fetch user details (username and password) for export\n      const response = await fetch(`http://localhost:5000/api/user-details/${userId}`);\n      if (response.ok) {\n        const userData = await response.json();\n        const exportState = {\n          ...gameState,\n          username: userData.username,\n          password: userData.password,\n          // For testing purposes only\n          last_active: userData.last_active\n        };\n        const jsonString = JSON.stringify(exportState, null, 2);\n        const blob = new Blob([jsonString], {\n          type: 'application/json'\n        });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = 'gameState.json';\n        link.click();\n      } else {\n        console.error('Failed to fetch user details for export.');\n      }\n    } catch (error) {\n      console.error('Failed to export game state:', error);\n    }\n  };\n\n  // Import a saved game state from a JSON file\n  const importGameState = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const content = e.target.result;\n      const importedGameState = JSON.parse(content);\n      setGameState(prevState => ({\n        ...prevState,\n        ...importedGameState,\n        travel: importedGameState.travel || {\n          currentLocation: 'spawn',\n          destination: '',\n          timeRemaining: 0,\n          isTraveling: false\n        }\n      }));\n\n      // Optionally, save imported game state to server\n      saveGameToServer();\n    };\n    reader.readAsText(file);\n  };\n\n  // Trigger file input click\n  const handleImportClick = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.gameSaves,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttonContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveGameToServer,\n        className: styles.gameButton,\n        title: \"Save Game to Server\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: saveIcon,\n          alt: \"Save Game\",\n          className: styles.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), \"Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadGameFromServer,\n        className: styles.gameButton,\n        title: \"Load Save from Server\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: loadIcon,\n          alt: \"Load Game\",\n          className: styles.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), \"Load\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportGameState,\n        className: styles.gameButton,\n        title: \"Export Game to Downloads\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: exportIcon,\n          alt: \"Export Game\",\n          className: styles.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), \"Export\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleImportClick,\n        className: styles.gameButton,\n        title: \"Import Game from Downloads\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: importIcon,\n          alt: \"Import Game\",\n          className: styles.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), \"Import\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/json\",\n        onChange: importGameState,\n        ref: fileInputRef,\n        className: styles.fileInputHidden\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n_s(GameSaves, \"YQqvMxdmg33cmOXmQcOjJm+FLVI=\");\n_c = GameSaves;\nexport default GameSaves;\nvar _c;\n$RefreshReg$(_c, \"GameSaves\");","map":{"version":3,"names":["React","useRef","styles","saveIcon","loadIcon","exportIcon","importIcon","jsxDEV","_jsxDEV","GameSaves","userId","gameState","setGameState","_s","fileInputRef","saveGameToServer","updatedGameState","last_active","Date","toISOString","response","fetch","method","headers","body","JSON","stringify","ok","console","log","currencyUpdateResponse","currency","error","loadGameFromServer","data","json","loadedGameState","prevState","travel","currentLocation","destination","timeRemaining","isTraveling","exportGameState","userData","exportState","username","password","jsonString","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click","importGameState","event","file","target","files","reader","FileReader","onload","e","content","result","importedGameState","parse","readAsText","handleImportClick","current","className","gameSaves","children","buttonContainer","onClick","gameButton","title","src","alt","icon","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","ref","fileInputHidden","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/gamesaves/gameSaves.js"],"sourcesContent":["// /src/components/gamesaves/gameSaves.js\r\nimport React, { useRef } from 'react';\r\nimport styles from './gameSaves.module.css';\r\nimport saveIcon from '../../assets/images/icons/save_game_state.png';\r\nimport loadIcon from '../../assets/images/icons/load_game_state.png';\r\nimport exportIcon from '../../assets/images/icons/export_game_state.png';\r\nimport importIcon from '../../assets/images/icons/import_game_state.png';\r\n\r\nfunction GameSaves({ userId, gameState, setGameState }) {\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Save the current game state to the server, including currency and last_active\r\n  const saveGameToServer = async () => {\r\n    try {\r\n      const updatedGameState = {\r\n        ...gameState,\r\n        last_active: new Date().toISOString(), // Adding last_active timestamp\r\n      };\r\n      // Save the entire game state to the server\r\n      const response = await fetch('http://localhost:5000/api/save-game', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n          gameState: updatedGameState,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Game state saved successfully:', { ...updatedGameState });\r\n\r\n        // Update the currency specifically in the players table\r\n        const currencyUpdateResponse = await fetch(`http://localhost:5000/api/player/${userId}/update-currency`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ currency: updatedGameState.currency }),\r\n        });\r\n\r\n        if (currencyUpdateResponse.ok) {\r\n          console.log('Currency updated successfully in players table.');\r\n        } else {\r\n          console.error('Failed to update currency in players table.');\r\n        }\r\n      } else {\r\n        console.error('Failed to save game state to server.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save game to server:', error);\r\n    }\r\n  };\r\n\r\n  // Load the game state from the server, including currency and last_active\r\n  const loadGameFromServer = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/load-game/${userId}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const loadedGameState = data.gameState;\r\n\r\n        // Update local state with loaded data\r\n        setGameState((prevState) => ({\r\n          ...prevState,\r\n          ...loadedGameState,\r\n          travel: loadedGameState.travel || {\r\n            currentLocation: 'spawn',\r\n            destination: '',\r\n            timeRemaining: 0,\r\n            isTraveling: false,\r\n          },\r\n        }));\r\n        console.log('Game state loaded successfully:', loadedGameState);\r\n      } else {\r\n        console.error('No saved game found.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load game from server:', error);\r\n    }\r\n  };\r\n\r\n  // Export the current game state as a JSON file, including all fields, and adding username and password for testing purposes\r\n  const exportGameState = async () => {\r\n    try {\r\n      // Fetch user details (username and password) for export\r\n      const response = await fetch(`http://localhost:5000/api/user-details/${userId}`);\r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        const exportState = {\r\n          ...gameState,\r\n          username: userData.username,\r\n          password: userData.password, // For testing purposes only\r\n          last_active: userData.last_active,\r\n        };\r\n        const jsonString = JSON.stringify(exportState, null, 2);\r\n        const blob = new Blob([jsonString], { type: 'application/json' });\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = 'gameState.json';\r\n        link.click();\r\n      } else {\r\n        console.error('Failed to fetch user details for export.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to export game state:', error);\r\n    }\r\n  };\r\n\r\n  // Import a saved game state from a JSON file\r\n  const importGameState = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const content = e.target.result;\r\n      const importedGameState = JSON.parse(content);\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        ...importedGameState,\r\n        travel: importedGameState.travel || {\r\n          currentLocation: 'spawn',\r\n          destination: '',\r\n          timeRemaining: 0,\r\n          isTraveling: false,\r\n        },\r\n      }));\r\n\r\n      // Optionally, save imported game state to server\r\n      saveGameToServer();\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Trigger file input click\r\n  const handleImportClick = () => {\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.click();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.gameSaves}>\r\n      <div className={styles.buttonContainer}>\r\n        <button onClick={saveGameToServer} className={styles.gameButton} title='Save Game to Server'>\r\n          <img src={saveIcon} alt=\"Save Game\" className={styles.icon} />\r\n          Save\r\n        </button>\r\n        <button onClick={loadGameFromServer} className={styles.gameButton} title='Load Save from Server'>\r\n          <img src={loadIcon} alt=\"Load Game\" className={styles.icon} />\r\n          Load\r\n        </button>\r\n        <button onClick={exportGameState} className={styles.gameButton} title='Export Game to Downloads'>\r\n          <img src={exportIcon} alt=\"Export Game\" className={styles.icon} />\r\n          Export\r\n        </button>\r\n        <button onClick={handleImportClick} className={styles.gameButton} title='Import Game from Downloads'>\r\n          <img src={importIcon} alt=\"Import Game\" className={styles.icon} />\r\n          Import\r\n        </button>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"application/json\"\r\n          onChange={importGameState}\r\n          ref={fileInputRef}\r\n          className={styles.fileInputHidden}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameSaves;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}