{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\achievements\\\\achievements.js\",\n  _s = $RefreshSig$();\n// /src/components/achievements/achievements.js\nimport React, { useEffect, useState } from 'react';\nimport styles from './achievements.module.css';\nimport achievementData from './achievements-list.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Achievements({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [achievements, setAchievements] = useState({});\n  const [notification, setNotification] = useState(null);\n  useEffect(() => {\n    // Load achievements from JSON\n    const achievementList = achievementData;\n\n    // Initialize achievements in gameState if not already present\n    if (!gameState.achievements) {\n      setGameState(prevState => ({\n        ...prevState,\n        achievements: achievementList.reduce((acc, achievement) => {\n          acc[achievement.id] = false;\n          return acc;\n        }, {})\n      }));\n      return; // Exit early if achievements were not initialized yet\n    }\n\n    // Check for completed achievements\n    const unlockedAchievements = achievementList.filter(achievement => {\n      var _gameState$buildings$;\n      switch (achievement.conditionType) {\n        case \"currency-based\":\n          return gameState.currency >= achievement.threshold;\n        case \"level-based\":\n          return gameState.level >= achievement.threshold;\n        case \"building-based\":\n          return gameState.buildings && Object.values(gameState.buildings).reduce((acc, building) => acc + building.count, 0) >= achievement.threshold;\n        case \"specific-building\":\n          return gameState.buildings && ((_gameState$buildings$ = gameState.buildings[achievement.buildingName]) === null || _gameState$buildings$ === void 0 ? void 0 : _gameState$buildings$.count) >= 1;\n        case \"click-based\":\n          return gameState.clicks >= achievement.threshold;\n        default:\n          return false;\n      }\n    });\n\n    // Update local achievements state\n    const updatedAchievements = {\n      ...gameState.achievements\n    };\n    unlockedAchievements.forEach(achievement => {\n      if (!updatedAchievements[achievement.id]) {\n        console.log(`Achievement unlocked: ${achievement.name}`); // Log when an achievement is unlocked\n        updatedAchievements[achievement.id] = true;\n        setNotification(`Achievement unlocked: ${achievement.name}`); // Set notification message\n        setTimeout(() => setNotification(null), 3000); // Remove notification after 3 seconds\n      }\n    });\n    setAchievements(updatedAchievements);\n\n    // Update gameState with only newly unlocked achievements\n    if (unlockedAchievements.some(achievement => !gameState.achievements[achievement.id])) {\n      setGameState(prevState => ({\n        ...prevState,\n        achievements: updatedAchievements\n      }));\n    }\n  }, [gameState, setGameState]);\n\n  // Dev Button to clear all achievements\n  const clearAllAchievements = () => {\n    console.log('Clearing all achievements for testing purposes');\n    const clearedAchievements = Object.keys(gameState.achievements).reduce((acc, key) => {\n      acc[key] = false;\n      return acc;\n    }, {});\n    setAchievements(clearedAchievements);\n    setGameState(prevState => ({\n      ...prevState,\n      achievements: clearedAchievements\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.achievementsContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Achievements\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.achievementList,\n      children: Object.keys(achievements).map(key => {\n        var _achievementData$find, _achievementData$find2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: achievements[key] ? `${styles.achievementItem} ${styles.achieved}` : styles.achievementItem,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: (_achievementData$find = achievementData.find(ach => ach.id === key)) === null || _achievementData$find === void 0 ? void 0 : _achievementData$find.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: (_achievementData$find2 = achievementData.find(ach => ach.id === key)) === null || _achievementData$find2 === void 0 ? void 0 : _achievementData$find2.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearAllAchievements,\n      className: `${styles.achievementButton} ${styles.devButton}`,\n      children: \"Clear All Achievements (Dev Button)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.notification,\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(Achievements, \"yEKsZ6oAKufv8WwJRMFuzRXCP24=\");\n_c = Achievements;\nexport default Achievements;\nvar _c;\n$RefreshReg$(_c, \"Achievements\");","map":{"version":3,"names":["React","useEffect","useState","styles","achievementData","jsxDEV","_jsxDEV","Achievements","gameState","setGameState","_s","achievements","setAchievements","notification","setNotification","achievementList","prevState","reduce","acc","achievement","id","unlockedAchievements","filter","_gameState$buildings$","conditionType","currency","threshold","level","buildings","Object","values","building","count","buildingName","clicks","updatedAchievements","forEach","console","log","name","setTimeout","some","clearAllAchievements","clearedAchievements","keys","key","className","achievementsContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_achievementData$find","_achievementData$find2","achievementItem","achieved","find","ach","description","onClick","achievementButton","devButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/achievements/achievements.js"],"sourcesContent":["// /src/components/achievements/achievements.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport styles from './achievements.module.css';\r\nimport achievementData from './achievements-list.json';\r\n\r\nfunction Achievements({ gameState, setGameState }) {\r\n  const [achievements, setAchievements] = useState({});\r\n  const [notification, setNotification] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Load achievements from JSON\r\n    const achievementList = achievementData;\r\n\r\n    // Initialize achievements in gameState if not already present\r\n    if (!gameState.achievements) {\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        achievements: achievementList.reduce((acc, achievement) => {\r\n          acc[achievement.id] = false;\r\n          return acc;\r\n        }, {}),\r\n      }));\r\n      return; // Exit early if achievements were not initialized yet\r\n    }\r\n\r\n    // Check for completed achievements\r\n    const unlockedAchievements = achievementList.filter((achievement) => {\r\n      switch (achievement.conditionType) {\r\n        case \"currency-based\":\r\n          return gameState.currency >= achievement.threshold;\r\n        case \"level-based\":\r\n          return gameState.level >= achievement.threshold;\r\n        case \"building-based\":\r\n          return (\r\n            gameState.buildings &&\r\n            Object.values(gameState.buildings).reduce((acc, building) => acc + building.count, 0) >= achievement.threshold\r\n          );\r\n        case \"specific-building\":\r\n          return gameState.buildings && gameState.buildings[achievement.buildingName]?.count >= 1;\r\n        case \"click-based\":\r\n          return gameState.clicks >= achievement.threshold;\r\n        default:\r\n          return false;\r\n      }\r\n    });\r\n\r\n    // Update local achievements state\r\n    const updatedAchievements = { ...gameState.achievements };\r\n    unlockedAchievements.forEach((achievement) => {\r\n      if (!updatedAchievements[achievement.id]) {\r\n        console.log(`Achievement unlocked: ${achievement.name}`); // Log when an achievement is unlocked\r\n        updatedAchievements[achievement.id] = true;\r\n        setNotification(`Achievement unlocked: ${achievement.name}`); // Set notification message\r\n        setTimeout(() => setNotification(null), 3000); // Remove notification after 3 seconds\r\n      }\r\n    });\r\n\r\n    setAchievements(updatedAchievements);\r\n\r\n    // Update gameState with only newly unlocked achievements\r\n    if (unlockedAchievements.some((achievement) => !gameState.achievements[achievement.id])) {\r\n      setGameState((prevState) => ({\r\n        ...prevState,\r\n        achievements: updatedAchievements,\r\n      }));\r\n    }\r\n  }, [gameState, setGameState]);\r\n\r\n  // Dev Button to clear all achievements\r\n  const clearAllAchievements = () => {\r\n    console.log('Clearing all achievements for testing purposes');\r\n    const clearedAchievements = Object.keys(gameState.achievements).reduce((acc, key) => {\r\n      acc[key] = false;\r\n      return acc;\r\n    }, {});\r\n    setAchievements(clearedAchievements);\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      achievements: clearedAchievements,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.achievementsContainer}>\r\n      <h2>Achievements</h2>\r\n      <div className={styles.achievementList}>\r\n        {Object.keys(achievements).map((key) => (\r\n          <div\r\n            key={key}\r\n            className={\r\n              achievements[key]\r\n                ? `${styles.achievementItem} ${styles.achieved}`\r\n                : styles.achievementItem\r\n            }\r\n          >\r\n            <h3>{achievementData.find((ach) => ach.id === key)?.name}</h3>\r\n            <p>{achievementData.find((ach) => ach.id === key)?.description}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={clearAllAchievements} className={`${styles.achievementButton} ${styles.devButton}`}>Clear All Achievements (Dev Button)</button>\r\n      {notification && <div className={styles.notification}>{notification}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Achievements;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}