{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\src\\\\components\\\\inventory\\\\inventory.js\";\n// /components/inventory/inventory.js\nimport React from 'react';\nimport styles from './inventory.module.css';\nimport itemConfig from '../items/itemConfig.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Inventory({\n  inventory,\n  setPlayer\n}) {\n  // Function to add a random item to inventory (for dev purposes)\n  const handleAddRandomItem = () => {\n    const randomItem = itemConfig.items[Math.floor(Math.random() * itemConfig.items.length)];\n    if (!randomItem) return;\n    setPlayer(prevPlayer => {\n      let updatedInventory = [...prevPlayer.inventory];\n      const existingItemIndex = updatedInventory.findIndex(i => i.itemId === randomItem.itemId);\n      if (existingItemIndex >= 0) {\n        updatedInventory[existingItemIndex].quantity += 1;\n      } else {\n        updatedInventory.push({\n          ...randomItem,\n          quantity: 1\n        });\n      }\n      return {\n        ...prevPlayer,\n        inventory: updatedInventory\n      };\n    });\n  };\n\n  // Function to use an item from inventory\n  const handleUseItem = itemId => {\n    const item = itemConfig.items.find(i => i.itemId === itemId);\n    if (!item) return;\n\n    // Handle item usage based on type\n    setPlayer(prevPlayer => {\n      let updatedInventory = [...prevPlayer.inventory];\n      const itemIndex = updatedInventory.findIndex(i => i.itemId === itemId);\n      if (itemIndex >= 0) {\n        if (updatedInventory[itemIndex].quantity > 1) {\n          updatedInventory[itemIndex].quantity -= 1;\n        } else {\n          updatedInventory.splice(itemIndex, 1);\n        }\n      }\n\n      // Apply item effect\n      let updatedPlayer = {\n        ...prevPlayer,\n        inventory: updatedInventory\n      };\n      if (item.type === \"consumable\" && item.effect.heal) {\n        updatedPlayer.hitpoints = Math.min(updatedPlayer.maxHitPoints, updatedPlayer.hitpoints + item.effect.heal);\n      } else if (item.type === \"weapon\" && item.attackBoost) {\n        updatedPlayer.attackPower += item.attackBoost;\n      } else if (item.type === \"armor\" && item.defenseBoost) {\n        updatedPlayer.defencePower += item.defenseBoost;\n      }\n      return updatedPlayer;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.inventoryContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddRandomItem,\n      className: styles.devButton,\n      children: \"Add Random Item (Dev)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), inventory.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your inventory is empty.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.inventoryGrid,\n      children: inventory.map((item, index) => {\n        const itemData = itemConfig.items.find(i => i.itemId === item.itemId);\n        if (!itemData) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.inventoryItem,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://localhost:5000/assets/images/items/${itemData.image}`,\n            alt: itemData.name,\n            className: styles.itemImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [itemData.name, \" (x\", item.quantity, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleUseItem(item.itemId),\n            children: \"Use\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_c = Inventory;\nexport default Inventory;\nvar _c;\n$RefreshReg$(_c, \"Inventory\");","map":{"version":3,"names":["React","styles","itemConfig","jsxDEV","_jsxDEV","Inventory","inventory","setPlayer","handleAddRandomItem","randomItem","items","Math","floor","random","length","prevPlayer","updatedInventory","existingItemIndex","findIndex","i","itemId","quantity","push","handleUseItem","item","find","itemIndex","splice","updatedPlayer","type","effect","heal","hitpoints","min","maxHitPoints","attackBoost","attackPower","defenseBoost","defencePower","className","inventoryContainer","children","onClick","devButton","fileName","_jsxFileName","lineNumber","columnNumber","inventoryGrid","map","index","itemData","inventoryItem","src","image","alt","name","itemImage","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/src/components/inventory/inventory.js"],"sourcesContent":["// /components/inventory/inventory.js\r\nimport React from 'react';\r\nimport styles from './inventory.module.css';\r\nimport itemConfig from '../items/itemConfig.json';\r\n\r\nfunction Inventory({ inventory, setPlayer }) {\r\n  // Function to add a random item to inventory (for dev purposes)\r\n  const handleAddRandomItem = () => {\r\n    const randomItem = itemConfig.items[Math.floor(Math.random() * itemConfig.items.length)];\r\n    if (!randomItem) return;\r\n\r\n    setPlayer((prevPlayer) => {\r\n      let updatedInventory = [...prevPlayer.inventory];\r\n      const existingItemIndex = updatedInventory.findIndex(i => i.itemId === randomItem.itemId);\r\n      if (existingItemIndex >= 0) {\r\n        updatedInventory[existingItemIndex].quantity += 1;\r\n      } else {\r\n        updatedInventory.push({ ...randomItem, quantity: 1 });\r\n      }\r\n      return { ...prevPlayer, inventory: updatedInventory };\r\n    });\r\n  };\r\n\r\n  // Function to use an item from inventory\r\n  const handleUseItem = (itemId) => {\r\n    const item = itemConfig.items.find((i) => i.itemId === itemId);\r\n    if (!item) return;\r\n\r\n    // Handle item usage based on type\r\n    setPlayer((prevPlayer) => {\r\n      let updatedInventory = [...prevPlayer.inventory];\r\n      const itemIndex = updatedInventory.findIndex(i => i.itemId === itemId);\r\n      if (itemIndex >= 0) {\r\n        if (updatedInventory[itemIndex].quantity > 1) {\r\n          updatedInventory[itemIndex].quantity -= 1;\r\n        } else {\r\n          updatedInventory.splice(itemIndex, 1);\r\n        }\r\n      }\r\n\r\n      // Apply item effect\r\n      let updatedPlayer = { ...prevPlayer, inventory: updatedInventory };\r\n      if (item.type === \"consumable\" && item.effect.heal) {\r\n        updatedPlayer.hitpoints = Math.min(updatedPlayer.maxHitPoints, updatedPlayer.hitpoints + item.effect.heal);\r\n      } else if (item.type === \"weapon\" && item.attackBoost) {\r\n        updatedPlayer.attackPower += item.attackBoost;\r\n      } else if (item.type === \"armor\" && item.defenseBoost) {\r\n        updatedPlayer.defencePower += item.defenseBoost;\r\n      }\r\n\r\n      return updatedPlayer;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.inventoryContainer}>\r\n      <button onClick={handleAddRandomItem} className={styles.devButton}>Add Random Item (Dev)</button>\r\n      {inventory.length === 0 ? (\r\n        <p>Your inventory is empty.</p>\r\n      ) : (\r\n        <div className={styles.inventoryGrid}>\r\n          {inventory.map((item, index) => {\r\n            const itemData = itemConfig.items.find(i => i.itemId === item.itemId);\r\n            if (!itemData) return null;\r\n            return (\r\n              <div key={index} className={styles.inventoryItem}>\r\n                <img src={`http://localhost:5000/assets/images/items/${itemData.image}`} alt={itemData.name} className={styles.itemImage} />\r\n                <p>{itemData.name} (x{item.quantity})</p>\r\n                <button onClick={() => handleUseItem(item.itemId)}>Use</button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Inventory;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}